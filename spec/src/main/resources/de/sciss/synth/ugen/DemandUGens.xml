<ugens revision="1">
    <ugen name="Demand" done-flag="true"> <!-- set done flag, but doesn't have done action -->
        <rate name="control"/>
        <rate name="audio"/>
        <output variadic="in"/>
        <arg name="trig" pos="0" rate="ugen">
            <doc>
                trigger. Can be any signal. A trigger happens when the signal changes from non-positive to positive.
            </doc>
        </arg>
        <arg name="reset" default="low" pos="2">
            <doc>
                trigger. Resets the list of ugens (`in`) when triggered.
            </doc>
        </arg>
        <arg name="in" variadic="true" pos="1">
            <doc>
                a demand-rate signal (possibly multi-channel) which is read at each trigger
            </doc>
        </arg>
        <doc warn-pos="true">
            <text>
                A UGen which polls results from demand-rate ugens when receiving a trigger.
                When there is a trigger at the `trig` input, a value is demanded from each ugen in the `in` input
                and output. The unit generators in the list should be demand-rate.
                When there is a trigger at the reset input, the demand rate ugens in the list are reset.

                Note: By design, a reset trigger only resets the demand ugens; it does not reset the value at Demand's output.
                Demand continues to hold its value until the next value is demanded, at which point its output value will
                be the first expected item in the `in` argument.

                Note: One demand-rate ugen represents a single stream of values, so that embedding the same ugen twice
                calls this stream twice per demand, possibly yielding different values. To embed the same sequence
                twice, either make sure the ugen is demanded only once, or create two instances of the ugen.

                '''Warning''': Demand currently seems to have problems with infinite sequences. As a workaround
                use a very large length instead. E.g. instead of `Dbrown(0, 1, inf)` use `Dbrown(0, 1, 0xFFFFFFFF)`!
            </text>
            <see>ugen.Duty</see>
            <see>ugen.TDuty</see>
        </doc>
    </ugen>
    <ugen name="Duty" side-effect="true"> <!-- has done action, but does not set done flag -->
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="dur" default="1.0" pos="0">
            <doc>
                the provider of time values. Can be a demand-rate ugen or any signal.
                The next poll is acquired after the previous duration.
            </doc>
        </arg>
        <arg name="reset" default="low" pos="2">
            <doc>
                a trigger which resets the dur input (if demand-rated) and the
                the level input ugen. The reset input may also be a demand-rate ugen, in this case
                providing a stream of reset times.
            </doc>
        </arg>
        <arg name="doneAction" default="doNothing" pos="3">
            <doc>
                a doneAction that is evaluated when the duration stream ends.
            </doc>
        </arg>
        <arg name="level" pos="1">
            <doc>
                a demand-rate ugen providing the output values.
            </doc>
        </arg>
        <doc warn-pos="true">
            <text>
                A UGen which polls results from demand-rate ugens in intervals specified by a duration input.
                A value from the `level` ugen is demanded and output according to a stream
                of duration values. When there is a trigger at the reset input, the `level`
                and the `dur` input are reset.
            </text>
            <see>ugen.TDuty</see>
            <see>ugen.Demand</see>
            <see>DoneAction</see>
        </doc>
    </ugen>
    <ugen name="TDuty" side-effect="true"> <!-- has done action, but does not set done flag -->
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="dur" default="1.0" pos="0">
            <doc>
                the provider of time values. Can be a demand-rate ugen or any signal.
                The next poll is acquired after the previous duration.
            </doc>
        </arg>
        <arg name="reset" default="low" pos="2">
            <doc>
                a trigger which resets the dur input (if demand-rated) and the
                the level input ugen. The reset input may also be a demand-rate ugen, in this case
                providing a stream of reset times.
            </doc>
        </arg>
        <arg name="doneAction" default="doNothing" pos="3">
            <doc>
                a doneAction that is evaluated when the duration stream ends.
            </doc>
        </arg>
        <arg name="level" default="1.0" pos="1">
            <doc>
                a demand-rate ugen providing the output values.
            </doc>
        </arg>
        <arg name="gapFirst" default="false" pos="4">
            <doc>
                when 0 (default), the UGen does the first level poll immediately and then
                waits for the first duration value. When this is 1, the UGen initially polls the first
                duration value, waits for that duration, and then polls the first level
                (along with polling the next duration value).
            </doc>
        </arg>
        <doc warn-pos="true">
            <text>
                A UGen which polls results from demand-rate ugens in intervals specified by a duration input,
                and outputs them as trigger values.
                A value from the `level` ugen is demanded and output for one sample (when
                running at audio-rate) or one block (when running at control-rate) according to a stream
                of duration values. When there is a trigger at the reset input, the `level` and
                the `dur` input are reset.
            </text>
            <see>ugen.Duty</see>
            <see>ugen.Demand</see>
            <see>DoneAction</see>
        </doc>
    </ugen>
    <ugen name="DemandEnvGen" side-effect="true"> <!-- has done action, but does not set done flag -->
        <!-- XXX TODO: tricky rate constraint: if either of gate
         and reset is audio-rate, the other needs to be, too.
         The UGen is the worst constructed entity ever. It interprets
         all sorts of inputs in subtle non standard ways. Someone
         should be punched for this.
        -->
        <rate name="audio"/>
        <arg name="levels">
            <doc>
                demand-rate ugen (or other ugen) returning level values
            </doc>
        </arg>
        <arg name="durs">
            <doc>
                demand-rate ugen (or other ugen) returning duration values
            </doc>
        </arg>
        <arg name="shapes" default="1">
            <doc>
                demand-rate ugen (or other ugen) returning shape number for the envelope segment.
            </doc>
        </arg>
        <arg name="curvatures" default="0.0">
            <doc>
                demand-rate ugen (or other ugen) returning curvature values. these are
                used for curveShape segments (shape number 5) and should be zero for other shapes.
            </doc>
        </arg>
        <arg name="gate" default="1.0"> <!-- non standard gate -->
            <doc>
                a control rate gate: if gate is x &gt;= 1, the ugen runs.
                if gate is 0 &gt; x &gt; 1, the ugen is released at the next level (according to doneAction).
                if gate is x &lt;= 0, the ugen is sampled and held.
            </doc>
        </arg>
        <arg name="reset" default="1.0"> <!-- non standard trigger -->
            <doc>
                a trigger signal. a trigger occurs when passing from non-positive to positive.
                when the trigger amplitude is &lt; 1, the input ugens (those that are demand-rated)
                are reset when the current segment ends. if the trigger amplitude is &gt; 1,
                the reset is performed immediately.
            </doc>
        </arg>
        <arg name="levelScale" default="1.0">
            <doc>
                demand-rate ugen returning level scaling values
            </doc>
        </arg>
        <arg name="levelBias" default="0.0">
            <doc>
                demand-rate ugen returning level offset values
            </doc>
        </arg>
        <arg name="timeScale" default="1.0">
            <doc>
                demand-rate ugen returning time scaling values
            </doc>
        </arg>
        <arg name="doneAction" default="doNothing">
            <doc>
                a done action performed when one of the demand-rated series ends
            </doc>
        </arg>
        <doc>
            <text>
                An envelope generator UGen using demand-rate inputs for the envelope segments.
                For each parameter of the envelope (levels, durations and shapes), values are polled
                every time a new segment starts.
            </text>
            <see>ugen.EnvGen</see>
            <see>Env.Shape</see>
            <see>DoneAction</see>
        </doc>
    </ugen>
    <ugen name="Dseries" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="length" type="ge-int" default="inf" pos="2">
            <doc>
                the number of elements to produces (maybe be infinite)
            </doc>
        </arg>
        <arg name="start" default="0.0" pos="0">
            <doc>
                the start value of the series
            </doc>
        </arg>
        <arg name="step" default="1.0" pos="1">
            <doc>
                the incremental step by which the series changes. the step is
                added to the previous value on each demand.
            </doc>
        </arg>
        <doc>
            <text>
                A demand-rate UGen which produces an arithmetic (linear) series.

                The arguments can be constant or any other ugens.
            </text>
            <see>ugen.Dgeom</see>
            <see>ugen.Dseq</see>
        </doc>
    </ugen>
    <ugen name="Dgeom" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="length" type="ge-int" default="inf" pos="2"/>
        <arg name="start" default="1.0" pos="0"/>
        <arg name="grow" default="2.0" pos="1"/>
    </ugen>
    <ugen name="Dwhite" indiv="true" random="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="length" type="ge-int" default="inf" pos="2"/>
        <arg name="lo" default="0.0" pos="0"/>
        <arg name="hi" default="1.0" pos="1"/>
    </ugen>
    <ugen name="Diwhite" indiv="true" random="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="length" type="ge-int" default="inf" pos="2"/>
        <arg name="lo" default="0.0" pos="0"/>
        <arg name="hi" default="1.0" pos="1"/>
    </ugen>
    <ugen name="Dbrown" indiv="true" random="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="length" type="ge-int" default="inf" pos="3"/>
        <arg name="lo" default="0.0" pos="0"/>
        <arg name="hi" default="1.0" pos="1"/>
        <arg name="step" default="0.01" pos="2"/>
    </ugen>
    <ugen name="Dibrown" indiv="true" random="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="length" type="ge-int" default="inf" pos="3"/>
        <arg name="lo" default="0.0" pos="0"/>
        <arg name="hi" default="1.0" pos="1"/>
        <arg name="step" default="0.01" pos="2"/>
    </ugen>
    <ugen name="Dseq" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="repeats" default="1" pos="1"/>
        <arg name="seq" variadic="true" pos="0"/>
    </ugen>
    <ugen name="Dser" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="repeats" default="1" pos="1"/>
        <arg name="seq" variadic="true" pos="0"/>
    </ugen>
    <ugen name="Dbufrd" indiv="true" reads-buf="true" done-flag="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="buf" type="buf">
            <doc>
                the identifier of the buffer to read out
            </doc>
        </arg>
        <arg name="index" default="0">
            <doc>
                the frame index into the buffer
            </doc>
        </arg>
        <arg name="loop" default="true">
            <doc>
                whether to wrap an exceeding phase around the buffer length (1) or not (0)
            </doc>
        </arg>
        <doc>
            <text>
                A demand-rate UGen that reads out a buffer. All inputs can be either demand ugen or any other ugen.
            </text>
            <see>ugen.BufRd</see>
            <see>ugen.Dbufwr</see>
        </doc>
    </ugen>
    <ugen name="Dbufwr" indiv="true" writes-buf="true" done-flag="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="buf" type="buf" pos="1"/>
        <arg name="index" default="0" pos="2"/>
        <arg name="in" pos="0"/>
        <arg name="loop" default="true" pos="3"/>
    </ugen>
    <ugen name="Drand" indiv="true" random="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="repeats" default="1" pos="1"/>
        <arg name="seq" variadic="true" pos="0"/>
    </ugen>
    <ugen name="Dxrand" indiv="true" random="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="repeats" default="1" pos="1"/>
        <arg name="seq" variadic="true" pos="0"/>
    </ugen>
    <ugen name="Dshuf" indiv="true" random="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="repeats" default="1" pos="1"/>
        <arg name="seq" variadic="true" pos="0"/>
    </ugen>
    <ugen name="Dswitch1" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="index" pos="1"/>
        <arg name="seq" variadic="true" pos="0"/>
    </ugen>
    <ugen name="Dswitch" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="index" pos="1"/>
        <arg name="seq" variadic="true" pos="0"/>
    </ugen>
    <ugen name="Dstutter" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="n" type="ge-int"/>
        <arg name="in"/>
    </ugen>
    <ugen name="Donce" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="in"/>
    </ugen>
    <ugen name="Dreset" indiv="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="in"/>
        <arg name="reset" type="trig"/>
    </ugen>
    <ugen name="Dpoll" indiv="true" side-effect="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="in" pos="0">
            <doc>
                the signal you want to poll
            </doc>
        </arg>
        <arg name="trigID" default="-1" pos="3">
            <doc>
                if greater then 0, a `"/tr"` OSC message is sent back to the client
                (similar to `SendTrig`)
            </doc>
        </arg>
        <arg name="run" default="open" pos="2">
            <doc>
                if 1 the polling is active, if 0 it is inactive.
            </doc>
        </arg>
        <arg name="label" type="ge-string" default="poll" init="true" pos="1">
            <doc>
                a string or symbol to be printed with the polled value
            </doc>
        </arg>
        <doc>
            <text>
                A demand rate UGen printing the current output value of its input to the console when polled.
            </text>
            <see>ugen.SendTrig</see>
            <see>ugen.Poll</see>
        </doc>
    </ugen>
</ugens>