<ugens revision="1">
    <ugen name="FFT" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="buf" type="buf" init="true">
            <doc>
                The buffer to use for writing the FFT to. The size must be a power of two.
                Since `FFT` operates at control rate (also being a power of two),
                the buffer should probably be at least as long as the control block size.
            </doc>
        </arg>
        <arg name="in">
            <doc>
                The time domain signal to be transformed into the spectral domain.
            </doc>
        </arg>
        <arg name="hop" default="0.5" init="true">
            A factor determining the step size between successive FFTs. That is, FFTs are performed
            every fftSize * hop sample frames. The default of 0.5 means thus a 50% overlap, while
            a hope of 1.0 means no overlapping. Choosing 0.0 will most likely crash the server!
        </arg>
        <arg name="winType" default="0" init="true">
            <doc>
                The window function applied before each FFT is taken. The default of 0 is a
                sine window which is good for phase vocoder applications (using the `PV_...` UGens).
                For analysis applications, you may want to use -1 which is a rectangle window
                (effectively no windowing) or 1 which is a Hann window. A Hann window gives
                perfect overlap-add reconstruction for a hope size of 0.5 (or 0.25 etc.)
            </doc>
        </arg>
        <arg name="active" default="true">
            <doc>
                This parameter can be temporarily set to &lt;= 0 to pause the FFT operation.
            </doc>
        </arg>
        <arg name="winSize" default="0" init="true">
            <doc>
                With the default value of zero, the window size equals the fft size. If you wish to
                perform zero padding, an explicit window size can be specified.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen performing short-time forward fourier transformations. In order to properly link
                the spectral ugens (`PV_...`), you should begin by using the output of each UGen
                (which is just the fft buffer identifier), and use that as buffer input of the next UGen.
                That way, the UGen graph is correctly sorted. E.g. `IFFT(PV_...(FFT(buf, in)))`.

                The UGen will initially output zero until the first FFT can be performed. This is the
                case after `hop * fftSize`. Thus for a default fft buffer size of 1024 and a `hop` of
                0.5, and for a default control block size of 64, for the first 1024*0.5/64 = 8
                control blocks the UGen will output zero. This also implies that the first FFT in this
                case if performed on the first 512 samples of the `in` signal (prepended by 512 zeros).
                In other words, the first 'full' FFT of the input happens after fftSize/controlBlockSize
                cycles, no matter what hop size was chosen.

                If you use FFT for performing signal analysis and not phase vocoder effects, make sure
                you change the window type accordingly.
            </text>
            <see>ugen.IFFT</see>
            <see>ugen.FFTTrigger</see>
        </doc>
    </ugen>
    <ugen name="IFFT" readsfft="true"> <!-- outputs something, like phase? -->
        <rate name="control"/>
        <rate name="audio"/> <!-- methodalias="apply" -->
        <arg name="chain" type="fft"/>
        <arg name="winType" default="0" init="true"/>
        <arg name="winSize" default="0" init="true"/>
    </ugen>
    <ugen name="FFTTrigger" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <arg name="buf" type="buf" init="true">
            <doc>
                the identifier of the buffer to use
            </doc>
        </arg>
        <arg name="hop" default="0.5" init="true">
            <doc>
                the hop size for timing triggers
            </doc>
        </arg>
        <arg name="polar" default="false" init="true">
            <doc>
                whether the complex buffer content is given in cartesian coordinates (0) or
                in polar coordinates (1)
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that takes a buffer and prepares it to be used in FFT chains,
                without doing an actual FFT on a signal. This is useful if you want to provide
                a buffer whose content had already been transformed into the Fourier domain.
            </text>
        </doc>
    </ugen>
    <!-- </file> -->

    <!-- <file name="PV_UGens"> -->
    <ugen name="PV_MagAbove" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="thresh" default="0.0">
            <doc>
                magnitude threshold.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that passes only those bins whose magnitudes are above a given threshold.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagBelow" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="thresh" default="0.0">
            <doc>
                magnitude threshold.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that passes only those bins whose magnitudes are below a given threshold.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagClip" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="thresh" default="0.0">
            <doc>
                magnitude threshold. Each bin's magnitude is limited to
                be not greater than this threshold.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that limits (clips) the magnitude of the bins to a given threshold.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagMul" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that multiplies the magnitudes of two inputs and keeps the
                phases of the first input.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagDiv" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <arg name="zeroes" default="0.0001">
            <doc>
                the noise floor to assume when detecting zero bins in
                chainB that would cause a division by zero and hence blow up. The ugen
                will use divide by this magnitude instead when zeroes are detected,
                resulting in a maximum boost of `zeroes.reciprocal`.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that divides magnitudes of two inputs and keeps the
                phases of the first input.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagSquared" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that squares the magnitudes and re-normalizes to previous peak.
                This makes weak bins weaker.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagNoise" readsfft="true" writesfft="true" random="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that multiplies the magnitudes by random noise.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_Copy" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that copies the spectral frames from chainA
                to chainB. This allows for parallel processing of spectral data without the
                need for multiple FFT UGens, and to copy out data at that point in the chain
                for other purposes. chainA and chainB must be the same size. The output
                will carry further chainA, so you chan insert the ugen at the appropriate
                place in the signal chain.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_CopyPhase" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that combines the magnitudes of first input and phases of the second input.
                phases of the first input.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_PhaseShift" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="shift">
            <doc>
                phase shift in radians
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that shifts the phase of each bins by a given amount.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_PhaseShift90" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that shift the phase of all bins by 90 degrees.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_PhaseShift270" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that shift the phase of all bins by 270 (or -90) degrees.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_Min" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that outputs the bins with the minimum magnitude
                of the two inputs.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_Max" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that outputs the bins with the maximum magnitude
                of the two inputs.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_Mul" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that performs a complex multiplication of the
                two inputs. The formula
                is `(Re(A) * Re(B) - Im(A) * Im(B)) + i(Im(A) * Re(B) + Re(A) * Im(B))`.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_Div" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that performs a complex division of the
                two inputs. Be careful that `chainB`, the divisor, does not
                contain zeroes as they would obviously blow up the division.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_Add" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by
                the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that performs a complex addition of the
                two inputs. The formula
                is `(Re(A) + Re(B)) + i(Im(A) + Im(B))`.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_RectComb" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="numTeeth" default="1.0">
            <doc>
                the number of periods in the rectangle wave, where
                zero would mean the input signal is not affected, one means that
                there is exactly one period of the wave across the spectrum,
                hence one pass-band and one stop-band.
            </doc>
        </arg>
        <arg name="phase" default="0.0">
            <doc>
                the phase offset of the rectangle wave, where
                1.0 is one full period. This is like the offset into the wavetable
                holding the rectangle, so a value of 0.25 means we start 25%
                into the basic waveform, and after 0.75 periods the next
                full period (high slope) begins.
            </doc>
        </arg>
        <arg name="width" default="0.5">
            <doc>
                the pulse width between 0.0 (infinitely small
                high slope, so all bins filtered out) to 0.5 (half period is
                high slope, half period is low slope) to 1.0 (maximally
                wide high slope, no bins filtered out).
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that makes a series of gaps in a spectrum.
                This is done by multiplying the spectrum with a kind of
                rectangle wave that goes from zero to nyquist. The high slope
                of the rectangle lets the input bins pass (quasi pass-band),
                the low slope filters them out (quasi stop-band).
            </text>
            <see>ugen.PV_RectComb2</see>
        </doc>
    </ugen>
    <ugen name="PV_RectComb2" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <arg name="numTeeth" default="1.0">
            <doc>
                the number of periods in the rectangle wave, where
                zero would mean the first input signal is fully passed through, one means that
                there is exactly one period of the wave across the spectrum,
                hence one pass-band (first signal passed through) and one stop-band
                (second signal passed through).
            </doc>
        </arg>
        <arg name="phase" default="0.0">
            <doc>
                the phase offset of the rectangle wave, where
                1.0 is one full period. This is like the offset into the wavetable
                holding the rectangle, so a value of 0.25 means we start 25%
                into the basic waveform, and after 0.75 periods the next
                full period (high slope) begins.
            </doc>
        </arg>
        <arg name="width" default="0.5">
            <doc>
                the pulse width between 0.0 (infinitely small
                high slope, so all bins are copied from the second input) to 0.5
                (half period is high slope -- copied from first input --, half period is
                low slope -- copied from second input) to 1.0 (maximally
                wide high slope, so all bins passed from the first input).
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that switches between two input spectra
                according to a rectangle wave.
                This is basically identical to `PV_RectComb`, however during the
                low slopes of the rectangle wave, instead of clearing out the bins,
                it copies over the corresponding bins of the second fft input buffer.
            </text>
            <see>ugen.PV_RectComb</see>
        </doc>
    </ugen>
    <ugen name="PV_BrickWall" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="wipe">
            <doc>
                can range between -1 and +1.
                if wipe == 0 then there is no effect.
                if  wipe &gt; 0 then it acts like a high pass filter, clearing bins from the bottom up.
                if  wipe &lt; 0 then it acts like a low pass filter, clearing bins from the top down.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that clears bins above or below a cutoff point.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_BinWipe" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <arg name="wipe">
            <doc>
                can range between -1 and +1.
                if wipe == 0 then the output is the same as inA.
                if  wipe &gt; 0 then it begins replacing with bins from inB from the bottom up.
                if  wipe &lt; 0 then it begins replacing with bins from inB from the top down.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that combine low and high bins from two inputs.
                It does so by copying low bins from one input and the high bins of the other,
                thus realizes a kind of "wipe" between the two input signals.
            </text>
            <see>ugen.PV_RandWipe</see>
        </doc>
    </ugen>
    <ugen name="PV_LocalMax" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="thresh" default="0.0">
            <doc>
                magnitude threshold used for general filtering, prior to
                the local-maximum-filtering
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that passes only those bins whose magnitudes constitute local maxima.
                Additionally, the given threshold is also used to filter out bins whose magnitude
                lies below this threshold.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_Conj" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that converts the bins into their
                complex conjugate counterparts. The complex conjugate
                is equal to the input, but with reversed sign of the imaginary part.
            </text>
        </doc>
    </ugen>

    <ugen name="PV_BinScramble" readsfft="true" writesfft="true" random="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="wipe" default="0.5">
            <doc>
                the amount of bins scrambled, from 0 (none) to 1 (all bins scrambled).
            </doc>
        </arg>
        <arg name="width" default="0.2">
            <doc>
                a value from zero to one, indicating the maximum randomized distance of a bin from its
                original location in the spectrum.
            </doc>
        </arg>
        <arg name="trig" default="high">
            <doc>
                causes a new random bin re-ordering to be made. a trigger
                occurs when passing from non-positive to positive value.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that randomizes the order of the bins.
                The trigger will select a new random ordering.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagSmear" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="bins" default="1">
            <doc>
                number of bins to average on each side of bin. As this number rises, so will CPU usage.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that averages each bin's magnitude with its neighbors.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagShift" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="stretch" default="1.0">
            <doc>
                the factor to multiply each bin position with
            </doc>
        </arg>
        <arg name="shift" default="0.0">
            <doc>
                the translation of the spectrum, in number of bins
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that stretches and shifts the magnitudes of the spectrum.
                This is live `PV_BinShift` but instead of scaling and shifting the whole complex
                bins (magnitude and phase), this only operates on the magnitudes and leaves
                the phases in their original bins.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_BinShift" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="stretch" default="1.0">
            <doc>
                the factor to multiply each bin position with, where 0.5 kind of
                transposes the signal down by an octave, and 2 transposes it up by an octave.
            </doc>
        </arg>
        <arg name="shift" default="0.0">
            <doc>
                the translation of the spectrum, in number of bins. Since the
                FFT produces a linear frequency axis, the will produce harmonic distortion.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that stretches and shifts the spectrum.
                It takes each bin, first stretches (scales) its position (bin number)
                with a given factor, and then adds a shift to it.
            </text>
        </doc>
    </ugen>

    <ugen name="PV_RandWipe" readsfft="true" writesfft="true" random="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chainA" type="fft">
            <doc>
                the first FFT'ed buffer (this gets replaced by the output signal)
            </doc>
        </arg>
        <arg name="chainB" type="fft">
            <doc>
                the second FFT'ed buffer
            </doc>
        </arg>
        <arg name="wipe">
            <doc>
                the crossfader position from 0.0 (all bins are
                taken from `chainA`) to 1.0 (all bins are taken from `chainB`).
                For instance, if wipe is 0.5, half of the bins are taken from
                either input. The decision whether a bin is taken from A or B
                is random, however remains constant between two triggers.
            </doc>
        </arg>
        <arg name="trig" type="trig">
            <doc>
                a signal the triggers the re-newed process of
                determining for each bin whether it will be taken from input
                A or B. A trigger occurs when passing from non-positive to
                positive value.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that cross-fades between two input spectra
                by taking bins randomly from them according to a given probability.
            </text>
            <see>ugen.PV_BinWipe</see>
        </doc>
    </ugen>
    <ugen name="PV_Diffuser" readsfft="true" writesfft="true" random="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="trig" default="high">
            <doc>
                to trigger a new selection of random phases. A trigger occurs when
                passing from non-positive to positive value.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that adds a different constant random phase shift to each bin.
                The trigger will select a new set of random phases.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_RandComb" readsfft="true" writesfft="true" random="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="wipe" default="0.5">
            <doc>
                the probability (from 0 to 1) of bins being wiped out,
                hence 0 means no bins are wiped out, 1 means all bins are wiped out
                (output will be silence).
            </doc>
        </arg>
        <arg name="trig" default="high">
            <doc>
                causes a new random bin selection to be made. a trigger
                occurs when passing from non-positive to positive value.
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that randomly clears out bins of the signal.
                Which bins are wiped out is subject to a random choice (only the amount is
                specified) that remains constant between triggers.
            </text>
        </doc>
    </ugen>
    <ugen name="PV_MagFreeze" readsfft="true" writesfft="true">
        <rate name="control" implied="true" method="apply"/>
        <output name="chain" type="fft"/>
        <arg name="chain" type="fft">
            <doc>
                the FFT'ed buffer
            </doc>
        </arg>
        <arg name="freeze" default="open">
            <doc>
                whether the current levels are frozen (&gt; 0) or not (0).
            </doc>
        </arg>
        <doc>
            <text>
                A phase vocoder UGen that freezes the magnitudes at current levels.
                Freezing happens when the freeze input has a value of &gt; 0.
            </text>
        </doc>
    </ugen>
    <!-- </file> -->

    <!-- <file name="PartitionedConvolution"> -->
    <ugen name="PartConv" readsbuf="true">
        <rate name="audio"/>
        <arg name="in"/>
        <arg name="fftSize" type="gint" init="true"/>
        <arg name="buf" type="buf" init="true"/>
    </ugen>
</ugens>