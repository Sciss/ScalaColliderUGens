<ugens revision="2">
    <!-- all documented, except: Pan4, Balance2, Rotate2, PanB, PanB2, BiPan2, DecodeB2 -->
    <ugen name="Pan2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="in" rate="ugen"/>
        </rate>
        <output name="left">
            <doc>
                left channel of the panned signal
            </doc>
        </output>
        <output name="right">
            <doc>
                right channel of the panned signal
            </doc>
        </output>
        <arg name="in">
            <doc>
                (monophonic) input signal to be panned
            </doc>
        </arg>
        <arg name="pos" default="0.0">
            <doc>
                panorama position between -1 (hard left) via 0 (center) to +1 (hard right)
            </doc>
        </arg>
        <arg name="level" default="1.0">
            <doc>
                additional gain control
            </doc>
        </arg>
        <doc>
            <text>
                A stereo panorama UGen based on equal-power amplitude control. When in center
                position (`pos = 0`), the signal is attenuated by sqrt(0.5) or approx. -3 dB.
            </text>
            <example name="periodic left-right oscillation">
                Pan2.ar(PinkNoise.ar(0.4), SinOsc.kr(0.25), 0.3)
            </example>
            <see>ugen.LinPan2</see>
            <see>ugen.PanAz</see>
            <see>ugen.Pan4</see>
            <see>ugen.Balance2</see>
            <see>ugen.XFade2</see>
        </doc>
    </ugen>
    <ugen name="Pan4">
        <rate name="control"/>
        <rate name="audio">
            <arg name="in" rate="ugen"/>
        </rate>
        <output name="leftFront"/>
        <output name="rightFront"/>
        <output name="leftBack"/>
        <output name="rightBack"/>
        <arg name="in"/>
        <arg name="xpos" default="0.0"/>
        <arg name="ypos" default="0.0"/>
        <arg name="level" default="1.0"/>
    </ugen>
    <ugen name="LinPan2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="in" rate="ugen"/>
        </rate>
        <output name="left">
            <doc>
                left channel of the panned signal
            </doc>
        </output>
        <output name="right">
            <doc>
                right channel of the panned signal
            </doc>
        </output>
        <arg name="in">
            <doc>
                (monophonic) input signal to be panned
            </doc>
        </arg>
        <arg name="pos" default="0.0">
            <doc>
                panorama position between -1 (hard left) via 0 (center) to +1 (hard right)
            </doc>
        </arg>
        <arg name="level" default="1.0">
            <doc>
                additional gain control
            </doc>
        </arg>
        <doc>
            <text>
                A stereo panorama UGen based on linear amplitude control. When in center
                position (`pos = 0`), the signal is attenuated by 0.5 or approx. -6 dB.
            </text>
            <example name="periodic left-right oscillation">
                LinPan2.ar(PinkNoise.ar(0.4), SinOsc.kr(0.25), 0.3)
            </example>
            <see>ugen.Pan2</see>
            <see>ugen.PanAz</see>
            <see>ugen.Balance2</see>
            <see>ugen.LinXFade2</see>
        </doc>
    </ugen>
    <ugen name="Balance2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="inL" rate="ugen"/>
            <arg name="inR" rate="ugen"/>
        </rate>
        <output name="left"/>
        <output name="right"/>
        <arg name="inL">
            <doc>
                The left input signal
            </doc>
        </arg>
        <arg name="inR">
            <doc>
                The right input signal
            </doc>
        </arg>
        <arg name="pos" default="0.0">
            <doc>
                The balance position from `-1` (left only, right muted) to `+1` (right only, left muted).
                The curve follows an equal power law, such that `left.squared + right.squared == 1`,
                e.g. at the middle position `0`, both channels are multiplied with factor
                `sqrt(0.5) = 0.707 = -3 dB`.
            </doc>
        </arg>
        <arg name="level" default="1.0"/>
        <doc>
            <text>
                An equal power two channel balancing UGen. It takes a left and right input signal
                and attenuates them according to the `pos` value, producing again a stereophonic output.
            </text>
            <see>ugen.XFade2</see>
        </doc>
    </ugen>
    <ugen name="Rotate2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="x" rate="ugen"/>
            <arg name="y" rate="ugen"/>
        </rate>
        <output name="xr"/>
        <output name="yr"/>
        <arg name="x"/>
        <arg name="y"/>
        <arg name="pos" default="0.0"/>
    </ugen>
    <ugen name="XFade2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="inA" rate="ugen"/>
            <!-- DC.ar(0) and K2A.ar(0) take about the same amount of CPU,
              where the latter is favorable as it is a single-out ugen.
              In contrast, Silent.ar takes about 20% more CPU (measured 07-jan-10) -->
            <arg name="inB" rate="ugen"/>  <!-- default="K2A.ar(0)" -->
        </rate>
        <arg name="inA">
            <doc>
                The first input signal
            </doc>
        </arg>
        <arg name="inB" default="0.0">
            <doc>
                The second input signal
            </doc>
        </arg>
        <arg name="pan" default="0.0">
            <doc>
                the cross-fade position from `-1` (only input A audible) to
                `+1` (only input B audible)
            </doc>
        </arg>
        <arg name="level" default="1.0">
            <doc>
                An overall amplitude multiplier that is applied to the output signal
            </doc>
        </arg>
        <doc>
            <text>
                An equal power two channel cross fading UGen. In center position
                (`pan = 0`), both input signals are attenuated by sqrt(0.5) or approx. -3 dB.
            </text>
            <see>ugen.LinXFade2</see>
            <see>ugen.Pan2</see>
            <see>ugen.XOut</see>
        </doc>
    </ugen>
    <ugen name="LinXFade2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="inA" rate="ugen"/>
            <!-- DC.ar(0) and K2A.ar(0) take about the same amount of CPU,
              where the latter is favorable as it is a singleout ugen.
              In contrast, Silent.ar takes about 20% more CPU (measured 07-jan-10) -->
            <arg name="inB" rate="ugen"/>
        </rate>
        <arg name="inA">
            <doc>
                The first input signal
            </doc>
        </arg>
        <arg name="inB" default="0.0">
            <doc>
                The second input signal
            </doc>
        </arg>
        <arg name="pan" default="0.0">
            <doc>
                the cross-fade position from `-1` (only input A audible) to
                `+1` (only input B audible)
            </doc>
        </arg>
        <arg name="level" default="1.0">
            <doc>
                An overall amplitude multiplier that is applied to the output signal
            </doc>
        </arg>
        <doc>
            <text>
                An linear two channel cross fading UGen. In center position
                (`pan = 0`), both input signals are attenuated by 0.5 or approx. -6 dB.
            </text>
            <see>ugen.LinXFade2</see>
            <see>ugen.LinPan2</see>
            <see>ugen.XOut</see>
        </doc>
    </ugen>
    <ugen name="PanB">
        <rate name="control"/>
        <rate name="audio">
            <arg name="in" rate="ugen"/>
        </rate>
        <output name="w"/>
        <output name="x"/>
        <output name="y"/>
        <output name="z"/>
        <arg name="in"/>
        <arg name="azimuth" default="0.0"/>
        <arg name="elevation" default="0.0"/>
        <arg name="level" default="1.0"/>
    </ugen>
    <ugen name="PanB2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="in" rate="ugen"/>
        </rate>
        <output name="w"/>
        <output name="x"/>
        <output name="y"/>
        <arg name="in"/>
        <arg name="azimuth" default="0.0"/>
        <arg name="level" default="1.0"/>
    </ugen>
    <ugen name="BiPanB2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="inA" rate="ugen"/>
            <arg name="inB" rate="ugen"/>
        </rate>
        <output name="w"/>
        <output name="x"/>
        <output name="y"/>
        <arg name="inA"/>
        <arg name="inB"/>
        <arg name="azimuth" default="0.0"/>
        <arg name="level" default="1.0"/>
    </ugen>
    <ugen name="PanAz">
        <rate name="control"/>
        <rate name="audio">
            <arg name="in" rate="ugen"/>
        </rate>
        <output variadic="numChannels"/>
        <arg name="numChannels" type="int">
            <doc>
                the number of output channels
            </doc>
        </arg>
        <arg name="in">
            <doc>
                the input signal
            </doc>
        </arg>
        <arg name="pos" default="0.0">
            <doc>
                the pan position. Channels are evenly spaced over a cyclic period of 2.0.
                the output channel position is `pos / 2 * numChannels + orient`. Thus, assuming an `orient`
                of `0.0`, and `numChannels` being for example `3`, a `pos` of `0*2.0/3 == 0.0` corresponds to the first
                output channel, a `pos` of `1*2.0/3` corresponds to the second output channel,
                a `pos` of `2*2.0/3=4.0/3` corresponds to the third and last output channel, and
                a `pos` of `3*2.0/3=2.0` completes the circle and wraps again to the first channel.
                Using a bipolar pan position, such as a sawtooth that ranges from -1 to +1, all channels will be
                cyclically panned through.
            </doc>
        </arg>
        <arg name="level" default="1.0">
            <doc>
                a control rate level input (linear multiplier).
            </doc>
        </arg>
        <arg name="width" default="2.0">
            <doc>
                the width of the panning envelope. The default of 2.0 pans between pairs
                of adjacent speakers. Width values greater than two will spread the pan over greater numbers
                of speakers. Width values less than one will leave silent gaps between speakers.
            </doc>
        </arg>
        <arg name="orient" default="0.0">
            <doc>
                the offset in the output channels regarding a pan position of zero.
                Note that ScalaCollider uses a default of zero which means that a pan pos of zero outputs
                the signal exactly on the first output channel. This is different in sclang where the default is
                0.5 which means that a pan position of zero will output the signal between the first and second
                speaker. Accordingly, an `orient` of `1.0` would result in a channel offset of one, where a
                pan position of zero would output the signal exactly on the second output channel, and so forth.
            </doc>
        </arg>
        <doc>
            <text>
                An azimuth-based panorama UGen. It uses vector-based-amplitude panning where
                the arbitrary number of speakers is supposed to be distributed in a circle
                with even spacing between them. It uses an equal-power-curve to transition
                between adjacent speakers. '''Note''' the different default value for
                the `orient` argument!

                Use case: To spread an multi-channel input signal across an output bus
                with a different number of channels, such that the first input channel is played on the
                first output channel (no spread to adjacent channels) and the last input channel is played
                to the last output channel (no spread to adjacent channels), you would create a dedicated `PanAz` per
                input channel where the pan position
                is `inChanIdx * 2f / (inChannels - 1) * (outChannels - 1) / outChannels`.
            </text>
            <see>ugen.Pan2</see>
            <see>ugen.SplayAz</see>
        </doc>
    </ugen>
    <ugen name="DecodeB2">
        <rate name="control"/>
        <rate name="audio">
            <arg name="w" rate="ugen"/>
            <arg name="x" rate="ugen"/>
            <arg name="y" rate="ugen"/>
        </rate>
        <output variadic="numChannels"/>
        <arg name="numChannels" type="int"/>
        <arg name="w"/>
        <arg name="x"/>
        <arg name="y"/>
        <arg name="orient" default="0.5"/>
    </ugen>
</ugens>