<ugens revision="9"> <!-- extension from sc3-plugins -->
    <!-- all documented. missing: GaussClass -->
    <ugen name="Logger" writes-buf="true">
        <rate name="control"/>
        <arg name="buf" type="buf" pos="0">
            <doc>
                identifier of the buffer to write to. Its number of channels should match those of `in`.
            </doc>
        </arg>
        <arg name="trig" type="trig" pos="2">
            <doc>
                a non-positive to positive transition causes the UGen to
                append the current input values to the buffer
            </doc>
        </arg>
        <arg name="reset" type="trig" default="low" pos="3">
            <doc>
                a non-positive to positive transition causes the
                write index into the buffer to be reset to zero.
                The contents of the buffer will also be filled with zeroes. If the buffer
                was full, the UGen output switches back to zero.
            </doc>
        </arg>
        <arg name="in" variadic="true" pos="1">
            <doc>
                (multi-channel) signal to write to the buffer. Its number of channels should match
                those of `buf`.
            </doc>
        </arg>
        <doc warn-pos="true">
            <text>
                A UGen to store values in a buffer upon receiving a trigger. When a trigger happens, the current
                input values are sampled and stored as the next consecutive frame of the buffer.

                Storage starts at the buffer beginning and increments the write position until the buffer is full.
                While the buffer is not yet full, the UGen outputs `1`, then it outputs `0`. The buffer position
                can be reset using the `reset` input.

                Note that the UGen zeroes the buffer upon first instantiation, to ensure that out-of-date data is
                not confused with new data.
            </text>
            <example name="fill buffer and plot on client side" type="full">
                val b = Buffer(s)
                b.alloc(100)

                val x = play {
                  val z = LFCub.kr(10) * EnvGen.kr(Env.linen(1, 2, 1), doneAction = freeSelf)
                  Logger.kr(b.id, z, Impulse.kr(49), reset = 0)
                }

                // after synth has completed:
                b.getData(num = 100).foreach(_.plot())

                x.free(); b.free()
            </example>
            <see>ugen.ListTrig</see>
        </doc>
    </ugen>
    <ugen name="ListTrig" reads-buf="true">
        <rate name="control"/>
        <arg name="buf" type="buf" pos="0">
            <doc>
                identifier of the buffer containing the offsets for the triggers in seconds. The offsets
                are taken against the start time of the synth or the last time a `reset` was received.
                They are not accumulative, and the behavior is undefined if the values are not sorted in
                ascending order. The buffer should be monophonic.
            </doc>
        </arg>
        <arg name="reset" type="trig" default="low" pos="2">
            <doc>
                resets the timer and begins reading the time offsets again at the start of the buffer.
            </doc>
        </arg>
        <arg name="delay" default="0" pos="3">
            <doc>
                this value is added to each of the buffer values. For example, to delay the list of values all by
                half a second, use a `delay` of `0.5`. This parameter is only updated at initialization or reset.
            </doc>
        </arg>
        <arg name="size" pos="1">
            <doc>
                the number of values to use from the buffer. Typically, this should be `BufFrames.kr(buf)`.
            </doc>
        </arg>
        <doc warn-pos="true">
            <text>
                A UGen that produces a scheduled sequences of trigger impulses. Trigger times are provided
                as a list (buffer) of absolute offsets from time zero. A trigger is output as a single
                control period of value `1`, after which output returns to zero.
            </text>
            <example name="trigger grains" type="full">
                val b = Buffer(s)
                b.alloc(10)
                b.setData(Vector(1, 2, 3, 5, 8, 13, 21, 34, 55, 89).map(_ * 0.1f)) // quasi Fibonacci

                val x = play {
                  val reset = "reset".tr
                  val tr  = ListTrig.kr(b.id, BufFrames.kr(b.id), reset)
                  Timer.kr(tr).poll(tr, "timer")
                  val env = EnvGen.ar(Env.perc(0.01, 0.1), gate = tr)
                  SinOsc.ar(Seq(440, 460)) * env * 0.2
                }

                x.set("reset" -> 1)  // start anew
                x.free(); b.free()
            </example>
            <see>ugen.ListTrig2</see>
            <see>ugen.Logger</see>
            <see>ugen.DemandEnvGen</see>
            <see>ugen.Dbufrd</see>
            <see>ugen.Timer</see>
        </doc>
    </ugen>
    <ugen name="ListTrig2" reads-buf="true">
        <rate name="control"/>
        <arg name="buf" type="buf" pos="0">
            <doc>
                identifier of the buffer containing the durations for the triggers in seconds. A value
                represents a relative offsets with respect to its predecessor. The first value indicates
                the time between the start of the synth or last `reset` received and the first trigger.
                The buffer should be monophonic.
            </doc>
        </arg>
        <arg name="reset" type="trig" default="low" pos="2">
            <doc>
                resets the timer and begins reading the time deltas again at the start of the buffer.
            </doc>
        </arg>
        <arg name="size" pos="1">
            <doc>
                the number of values to use from the buffer. Typically, this should be `BufFrames.kr(buf)`.
            </doc>
        </arg>
        <doc warn-pos="true">
            <text>
                A UGen that produces a scheduled sequences of trigger impulses. Trigger times are provided
                as a list (buffer) of relative durations between consecutive events. A trigger is output as a single
                control period of value `1`, after which output returns to zero.
            </text>
            <example name="trigger grains" type="full">
                val b = Buffer(s)
                b.alloc(11)
                b.setData(Vector(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89).map(_ * 0.1f)) // Fibonacci

                val x = play {
                  val reset = "reset".tr
                  val tr  = ListTrig2.kr(b.id, BufFrames.kr(b.id), reset)
                  Timer.kr(tr).poll(tr, "timer")
                  val env = EnvGen.ar(Env.perc(0.01, 0.1), gate = tr)
                  SinOsc.ar(Seq(440, 460)) * env * 0.2
                }

                x.set("reset" -> 1)  // start anew
                x.free(); b.free()
            </example>
            <see>ugen.ListTrig</see>
            <see>ugen.Logger</see>
            <see>ugen.DemandEnvGen</see>
            <see>ugen.Dbufrd</see>
            <see>ugen.ListTrig2</see>
        </doc>
    </ugen>
    <!-- TODO: GaussClass -->
    <ugen name="BufMax" reads-buf="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <output name="value"/>
        <output name="index"/>
        <arg name="buf" type="buf">
            <doc>
                identifier of the buffer containing the values to analyze. It treats multi-channel buffers
                as monophonic, and indices will refer to the de-interleaved frames and channels.
            </doc>
        </arg>
        <arg name="gate" type="gate" default="open">
            <doc>
                when closed (zero), holds the last output value.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that finds the largest value in a buffer, providing both the value and the index.
            </text>
            <example name="simple test" type="full">
                val b = Buffer(s)
                b.alloc(100)
                b.zero()
                b.set(33 -> 1.034)

                // verify that the 33rd value is detected...
                val x = play {
                  val m  = BufMax.kr(b.id)
                  val tr = "poll".tr(1)
                  m.value.poll(tr, "max-value")
                  m.index.poll(tr, "max-index")
                  ()
                }

                // ...until we set a new maximum...
                b.set(74 -> 1.038); x.set("poll" -> 1)

                x.free(); b.free()
            </example>
            <see>ugen.BufMin</see>
            <see>ugen.ArrayMax</see>
        </doc>
    </ugen>
    <ugen name="BufMin" reads-buf="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <output name="value"/>
        <output name="index"/>
        <arg name="buf" type="buf">
            <doc>
                identifier of the buffer containing the values to analyze. It treats multi-channel buffers
                as monophonic, and indices will refer to the de-interleaved frames and channels.
            </doc>
        </arg>
        <arg name="gate" type="gate" default="open">
            <doc>
                when closed (zero), holds the last output value.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that finds the smallest value in a buffer, providing both the value and the index.
            </text>
            <example name="simple test" type="full">
                val b = Buffer(s)
                b.alloc(100)
                b.zero()
                b.set(33 -> -1.034)

                // verify that the 33rd value is detected...
                val x = play {
                  val m  = BufMin.kr(b.id)
                  val tr = "poll".tr(1)
                  m.value.poll(tr, "min-value")
                  m.index.poll(tr, "min-index")
                  ()
                }

                // ...until we set a new minimum...
                b.set(74 -> -1.038); x.set("poll" -> 1)

                x.free(); b.free()
            </example>
            <see>ugen.BufMax</see>
            <see>ugen.ArrayMin</see>
        </doc>
    </ugen>
    <ugen name="ArrayMax">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio"/>
        <output name="value"/>
        <output name="index"/>
        <arg name="in" variadic="true">
            <doc>
                multi-channel signal to analyze
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that finds the largest value across the channels of its input signal, providing both the value
                and the index.
            </text>
            <example name="randomly changing array of three numbers">
                val tr  = Impulse.kr(1)
                val sig = Vector.fill(3)(TIRand.kr(0, 100, tr))
                sig.zipWithIndex.foreach { case (n, i) => n.poll(tr, s"sig[$i]") }
                val m   = ArrayMax.kr(sig)
                m.value.poll(tr, "max-value")
                m.index.poll(tr, "max-index")
                ()
            </example>
            <see>ugen.ArrayMin</see>
            <see>ugen.BufMax</see>
        </doc>
    </ugen>
    <ugen name="ArrayMin">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio"/>
        <output name="value"/>
        <output name="index"/>
        <arg name="in" variadic="true">
            <doc>
                multi-channel signal to analyze
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that finds the smallest value across the channels of its input signal, providing both the value
                and the index.
            </text>
            <example name="randomly changing array of three numbers">
                val tr  = Impulse.kr(1)
                val sig = Vector.fill(3)(TIRand.kr(0, 100, tr))
                sig.zipWithIndex.foreach { case (n, i) => n.poll(tr, s"sig[$i]") }
                val m   = ArrayMin.kr(sig)
                m.value.poll(tr, "min-value")
                m.index.poll(tr, "min-index")
                ()
            </example>
            <see>ugen.ArrayMax</see>
            <see>ugen.BufMin</see>
        </doc>
    </ugen>
</ugens>