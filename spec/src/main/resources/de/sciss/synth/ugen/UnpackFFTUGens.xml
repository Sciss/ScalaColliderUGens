<ugens revision="7">
    <ugen name="Unpack1FFT" reads-fft="true">
        <rate name="demand" implied="true" method="apply"/>
        <arg name="chain" type="fft"/>
        <arg name="fftSize" type="ge-int"/>
        <arg name="bin" type="ge-int"/>
        <arg name="which" default="0"/>
        <!-- TODO: doc -->
    </ugen>

    <ugen name="PackFFT" writes-fft="true">    <!-- accepts demand rate -->
        <rate name="control" implied="true" method="apply"/>
        <arg name="chain" type="fft" pos="0"/>
        <arg name="fftSize" type="ge-int" pos="1"/>
        <arg name="from" type="ge-int" default="0" pos="3">
            <doc>
                index of lower bin
            </doc>
        </arg>
        <arg name="to" type="ge-int" pos="4">
            <doc>
                index of upper bin (inclusive)
            </doc>
        </arg>
        <arg name="clear" type="switch" default="false" pos="5">
            <doc>
                if `1`, clears the buffer before packing the values, setting its contents to zero.
            </doc>
        </arg>
        <arg name="values" variadic="true" prepend-size="true" pos="2">
            <doc>
                input data to pack. It should be a flat sequence containing interleaved magnitude and phase
                components of all bins in ascending order.
                E.g. [mag0, phase0, mag1, phase1, mag2, phase2, ... magN, phaseN].
                This input is typically demand-rate.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that writes a complex input signal into an FFT buffer. The input is a sequence of
                interleaved magnitudes and phases. It is written to an FFT buffer ready for transforming it back
                into time-domain audio using IFFT.
            </text>
            <example name="harmonic sound with changing overtone intensities">
                // create simple undulating magnitudes
                val m0 = FSinOsc.kr(Seq.fill(100)(ExpRand(0.1, 1))) * 0.5 + 0.5
                // give them a "rolloff" to make the sound less unpleasant
                val m1 = m0 * Seq.tabulate(100)(_.linlin(0, 99, 1.0, 0.01).squared)
                // turn the bins on and off at different rates
                val mags = m1 * LFPulse.kr(Seq.fill(100)(2 pow IRand(-3, 5)))
                // ignore phase
                val phases: GE = Seq.fill(100)(0)
                // We need to create an FFT chain to feed our data in to.
                // The easiest way is to do an FFT on some signal which we then ignore!
                val buf = FFT(LocalBuf(512), DC.ar(0))
                // now we can do the packing
                val chain = PackFFT(buf, 512, Zip(mags, phases), 0, 99, 1)
                val sig = IFFT.ar(chain)
                Pan2.ar(sig)
            </example>
            <see>ugen.Unpack1FFT</see>
            <see>ugen.FFT</see>
            <see>ugen.IFFT</see>
            <see>ugen.SetBuf</see>
        </doc>
    </ugen>
</ugens>