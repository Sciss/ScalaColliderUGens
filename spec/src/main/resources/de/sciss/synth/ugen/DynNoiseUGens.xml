<ugens revision="1">
    <ugen name="LFDNoise0" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
        <doc>
            <text>
                A dynamic step noise UGen. Like `LFNoise0`, it generates abruptly changing random values
                between `-1` and `+1` at a rate given by the `freq` argument, with two differences:
                There is no time quantization, and it there is fast recovery from low freq values.

                In contrast, `LFNoise0`, `LFNoise1`, and `LFNoise2` quantize to the nearest integer division
                of the sample rate, and they poll the freq argument only when scheduled, and thus seem
                to hang when the frequencies get very low.

                If very high or very low frequencies are not needed, or fixed frequencies are used,
                `LFNoise0` is more efficient.
            </text>
            <see>ugen.LFNoise0</see>
            <see>ugen.LFDNoise1</see>
            <see>ugen.LFDNoise3</see>
            <see>ugen.TRand</see>
        </doc>
    </ugen>
    <ugen name="LFDNoise1" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
        <doc>
            <text>
                A dynamic ramp noise UGen. Like `LFNoise1`, it generates linearly interpolated random values
                between `-1` and `+1` at a rate given by the `freq` argument, with two differences:
                There is no time quantization, and it there is fast recovery from low freq values.

                In contrast, `LFNoise0`, `LFNoise1`, and `LFNoise2` quantize to the nearest integer division
                of the sampl erate, and they poll the freq argument only when scheduled, and thus seem
                to hang when the frequencies get very low.

                If very high or very low frequencies are not needed, or fixed frequencies are used,
                `LFNoise1` is more efficient.
            </text>
            <see>ugen.LFNoise1</see>
            <see>ugen.LFDNoise0</see>
            <see>ugen.LFDNoise3</see>
            <see>ugen.Ramp</see>
        </doc>
    </ugen>
    <ugen name="LFDNoise3" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
    </ugen>
    <ugen name="LFDClipNoise" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
    </ugen>
</ugens>