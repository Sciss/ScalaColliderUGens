<ugens revision="5">
    <!-- all documented -->
    <ugen name="LFDNoise0" type-id="105" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
        <doc>
            <text>
                A dynamic step noise UGen. Like `LFNoise0`, it generates abruptly changing random values
                between `-1` and `+1` at a rate given by the `freq` argument, with two differences:
                There is no time quantization, and it there is fast recovery from low freq values.

                In contrast, `LFNoise0`, `LFNoise1`, and `LFNoise2` quantize to the nearest integer division
                of the sample rate, and they poll the freq argument only when scheduled, and thus seem
                to hang when the frequencies get very low.

                If very high or very low frequencies are not needed, or fixed frequencies are used,
                `LFNoise0` is more efficient.
            </text>
            <!-- TODO: example -->
            <see>ugen.LFNoise0</see>
            <see>ugen.LFDNoise1</see>
            <see>ugen.LFDNoise3</see>
            <see>ugen.TRand</see>
        </doc>
    </ugen>
    <ugen name="LFDNoise1" type-id="106" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
        <doc>
            <text>
                A dynamic ramp noise UGen. Like `LFNoise1`, it generates linearly interpolated random values
                between `-1` and `+1` at a rate given by the `freq` argument, with two differences:
                There is no time quantization, and it there is fast recovery from low freq values.

                In contrast, `LFNoise0`, `LFNoise1`, and `LFNoise2` quantize to the nearest integer division
                of the sample rate, and they poll the freq argument only when scheduled, and thus seem
                to hang when the frequencies get very low.

                If very high or very low frequencies are not needed, or fixed frequencies are used,
                `LFNoise1` is more efficient.
            </text>
            <!-- TODO: example -->
            <see>ugen.LFNoise1</see>
            <see>ugen.LFDNoise0</see>
            <see>ugen.LFDNoise3</see>
            <see>ugen.Ramp</see>
        </doc>
    </ugen>
    <ugen name="LFDNoise3" type-id="107" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
        <doc>
            <text>
                A dynamic ramp noise UGen. It is similar to `LFNoise2`, with three differences: It uses cubic
                instead of quadratic interpolation for the random values between `-1` and `+1` at a rate given by
                the `freq` argument. There is no time quantization, and it there is fast recovery from low freq values.

                In contrast, `LFNoise0`, `LFNoise1`, and `LFNoise2` quantize to the nearest integer division
                of the sample rate, and they poll the freq argument only when scheduled, and thus seem
                to hang when the frequencies get very low.
            </text>
            <example name="compare dynamic and non-dynamic">
                val r    = MouseX.kr(0.1, 1000, 1)
                val a    = LFNoise2 .ar(r)
                val b    = LFDNoise3.ar(r)
                val freq = Select.ar(MouseButton.kr(lag = 0), Seq(a, b))
                SinOsc.ar(freq.mulAdd(200, 500)) * 0.2
            </example>
            <see>ugen.LFNoise2</see>
            <see>ugen.LFDNoise0</see>
            <see>ugen.LFDNoise1</see>
        </doc>
    </ugen>
    <ugen name="LFDClipNoise" type-id="108" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that randomly generates the values -1 or +1 at a rate given by the nearest integer
                division of the sample rate by the frequency argument. The difference to `LFClipNoise` is
                that this UGen does not quantize time and recovers fast from frequency input changes.
            </text>
            <example name="generator">
                LFDClipNoise.ar(500) * 0.2
            </example>
            <example name="random panning">
                val pos = LFDClipNoise.ar(4)
                Pan2.ar(PinkNoise.ar, pos)
            </example>
            <example name="modulate frequency">
                LFDClipNoise.ar(XLine.kr(100, 10000, 20)) * 0.2
            </example>
            <see>ugen.LFClipNoise</see>
            <see>ugen.LFNoise0</see>
            <see>ugen.LFNoise1</see>
            <see>ugen.CoinGate</see>
            <see>ugen.Schmidt</see>
            <see>ugen.GrayNoise</see>
        </doc>
    </ugen>
</ugens>