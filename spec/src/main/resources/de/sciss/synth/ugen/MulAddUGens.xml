<ugens revision="3">
    <ugen name="MulAdd" sourcecode="true">
        <!--<rate name="scalar"/>-->
        <!--<rate name="control"/>-->
        <!--<rate name="audio"/>-->
        <!--<rate name="demand"/>-->
        <arg name="in"> <!-- rate="ugen" -->
            <doc>
                the input signal to scale and offset
            </doc>
        </arg>
        <arg name="mul">
            <doc>
                the scaling factor, applied first to the input
            </doc>
        </arg>
        <arg name="add">
            <doc>
                the offset, added after applying the multiplication
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that multiplies an input with another signal
                and then adds a third signal. This can be used to translate
                an element into a different value range.

                Usually the graph element operator `madd` is used
                instead of explicitly writing `MulAdd`.

                {{{
                MulAdd(in, mul, add) == in.madd(mul, add) == in * mul + add
                }}}
            </text>
            <example name="scale value range">
                // input range -1 to +1,
                // output range ((-1 * 100) + 300) = 200
                // to           ((+1 * 100) + 300) = 400
                val freq = SinOsc.kr(1).madd(100, 300) // or MulAdd(..., 100, 300)
                freq.poll(label = "freq")
                SinOsc.ar(freq) * 0.1
            </example>
            <see>ugen.BinaryOpUGen</see>
            <see>ugen.Sum3</see>
            <see>ugen.Sum4</see>
        </doc>
    </ugen>
    <ugen name="Sum3" sourcecode="true">
        <!--<rate name="scalar"/>-->
        <!--<rate name="control"/>-->
        <!--<rate name="audio"/>-->
        <!--<rate name="demand"/>-->
        <arg name="in0">
            <doc>
                first of the three inputs
            </doc>
        </arg>
        <arg name="in1">
            <doc>
                second of the three inputs
            </doc>
        </arg>
        <arg name="in2">
            <doc>
                third of the three inputs
            </doc>
        </arg>
        <doc>
            <text>
                A UGen to efficiently add three signals together.
                Usually used indirectly through `Mix`.
            </text>
            <!-- TODO: example -->
            <see>ugen.BinaryOpUGen</see>
            <see>ugen.MulAdd</see>
            <see>ugen.Sum4</see>
        </doc>
    </ugen>
    <ugen name="Sum4" sourcecode="true">
        <!--<rate name="scalar"/>-->
        <!--<rate name="control"/>-->
        <!--<rate name="audio"/>-->
        <!--<rate name="demand"/>-->
        <arg name="in0">
            <doc>
                first of the four inputs
            </doc>
        </arg>
        <arg name="in1">
            <doc>
                second of the four inputs
            </doc>
        </arg>
        <arg name="in2">
            <doc>
                third of the four inputs
            </doc>
        </arg>
        <arg name="in3">
            <doc>
                fourth of the four inputs
            </doc>
        </arg>
        <doc>
            <text>
                A UGen to efficiently add four signals together.
                Usually used indirectly through `Mix`.
            </text>
            <!-- TODO: example -->
            <see>ugen.BinaryOpUGen</see>
            <see>ugen.MulAdd</see>
            <see>ugen.Sum3</see>
        </doc>
    </ugen>
</ugens>