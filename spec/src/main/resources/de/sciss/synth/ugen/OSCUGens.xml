<ugens revision="8">
    <!-- all documented, except: Shaper, SinOscFB, VOsc, VOsc3, Osc, OscN, COsc, Klang, Klank -->
    <ugen name="DegreeToKey" reads-buf="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="buf" type="buf">
            <doc>
                buffer which contains the steps for each scale degree.
            </doc>
        </arg>
        <arg name="in" type="ge-int">
            <doc>
                input index signal
            </doc>
        </arg>
        <arg name="octave" default="12">
            <doc>
                number of steps per octave in the scale.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that uses an input signal as an index into an octave repeating table of pitch classes.
                The input is truncated to an integer, and indices wrap around the table and shift octaves as they do.
            </text>
            <example name="modal space where mouse x controls pitch step">
                // initialize the scale buffer (Dorian)
                val scale = Vector(0, 2, 3.2, 5, 7, 9, 10)
                val buf   = LocalBuf(scale.size)
                SetBuf(buf, scale)

                // base MIDI pitch
                val base  = DegreeToKey.kr(buf, in = MouseX.kr(0, 15), octave = 12) + 72
                val noise = LFNoise1.kr(Seq(3, 3)) * 0.04  // low freq stereo detuning
                // lead tone
                val lead  = SinOsc.ar((base + noise).midicps)
                // drone 5ths
                val drone = RLPF.ar(LFPulse.ar(Seq(48.midicps, 55.midicps), 0.15),
                                    SinOsc.kr(0.1).madd(10, 72).midicps, 0.1)
                val mix = (lead + drone) * 0.1
                // add some 70's euro-space-rock echo
                CombN.ar(mix, 0.31, 0.31, 2) + mix
            </example>
            <see>ugen.WrapIndex</see>
        </doc>
    </ugen>
    <ugen name="Select">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio">
            <arg name="in" rate="ugen"/>
        </rate>
        <arg name="index" type="ge-int">
            <doc>
                an index signal into the channels of the `in` argument. The index
                is automatically clipped to lie between `0` and `in.numOutputs - 1`. The index
                is truncated to its integer part (not rounded), hence using for instance an
                index of `0.9` will still be interpreted as index `0`.
            </doc>
        </arg>
        <arg name="in" variadic="true">
            <doc>
                a graph element which is composed of the channels to be indexed.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen which selects among a sequence of inputs, according to an index signal.
                Note that, although only one signal of the `multi` input is let through at
                a time, still all ugens are continuously running.
            </text>
            <!-- TODO: example -->
            <see>ugen.TWindex</see>
        </doc>
    </ugen>
    <ugen name="TWindex">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="trig" type="trig">
            <doc>
                the trigger used to calculate a new index. a trigger occurs when passing
                from non-positive to positive
            </doc>
        </arg>
        <arg name="prob">
            <doc>
                a multi-channel graph element, where the output channels correspond to
                to the probabilities of their respective indices being chosen.
            </doc>
        </arg>
        <arg name="normalize" default="false">
            <doc>
                `0` if the seq argument already sums up to 1.0 and thus doesn't need
                normalization, `1` if the sum is not guaranteed to be 1.0 and thus the ugen is asked
                to provide the normalization.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen providing a probability-weighted index into a sequence upon receiving a trigger.

                When triggered, returns a random index value based the values of the channels of the
                `prob` argument functioning as probabilities. The index is zero based, hence goes from
                `0` to `prob.numOutputs - 1`.

                By default the sequence of probabilities should sum to 1.0, however for convenience, this
                can be achieved by the ugen when the `normalize` flag is set to 1 (less efficient).
            </text>
            <!-- TODO: example -->
            <see>ugen.Select</see>
        </doc>
    </ugen>
    <ugen name="Index" reads-buf="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="buf" type="buf">
            <doc>
                The buffer to read from.
            </doc>
        </arg>
        <arg name="in" default="0">
            <doc>
                The sample index into the buffer. This is truncated to an integer automatically.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen which reads a single sample value from a buffer at a given index.

                It uses the `in` argument as index into the buffer, truncating that argument to an integer.
                Out-of-range index values are clipped to the valid range.

                While designed for monophonic buffers, it works with multi-channel buffers by treating them
                as de-interleaved. For example, if the buffer has two frames and two channels, index 0
                corresponds to frame 0, channel 0, index 1 correspond to frame 0, channel 1, index 2
                corresponds to frame 1, channel 0, and index 3 corresponds to frame 1, channel 1.
            </text>
            <!-- TODO: example -->
            <see>ugen.BufRd</see>
            <see>ugen.WrapIndex</see>
            <see>ugen.IndexL</see>
            <see>ugen.IndexInBetween</see>
            <see>ugen.DetectIndex</see>
        </doc>
    </ugen>
    <ugen name="IndexL" reads-buf="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="buf" type="buf">
            <doc>
                The buffer to read from.
            </doc>
        </arg>
        <arg name="in" default="0">
            <doc>
                The sample index into the buffer. This can have a fractional part.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen which reads from a buffer at a given index, linearly interpolating between
                neighboring points.

                It uses the `in` argument as index into the buffer. Out-of-range index values are clipped
                to the valid range. If the index has a fractional part, it is used to interpolate between
                the buffer index at the floor and the buffer index at the ceiling of the index argument.

                While designed for monophonic buffers, it works with multi-channel buffers by treating them
                as de-interleaved. See the `Index` UGen for details.
            </text>
            <!-- TODO: example -->
            <see>ugen.Index</see>
            <see>ugen.IndexInBetween</see>
        </doc>
    </ugen>
    <!-- this should exist according to plugin sources... -->
    <ugen name="FoldIndex" reads-buf="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="buf" type="buf">
            <doc>
                The buffer to read from.
            </doc>
        </arg>
        <arg name="in" default="0">
            <doc>
                The sample index into the buffer. This is truncated to an integer automatically.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen which reads a single sample value from a buffer at a given index.

                It uses the `in` argument as index into the buffer, truncating that argument to an integer.
                Out-of-range index values are "folded" inside the valid range. Folding means reflecting
                the excess at the valid range's boundaries.

                For example, if the buffer has four samples, index 4 is wrapped to index 2 (the excess beyond
                the maximum index of 3 is 4 - 3 = 1, and the excess is folded so that and 3 - 1 = 2),
                index 5 is folded to index 1, index -1 is folded to index 1, index -2 is folded to index 2, etc.

                While designed for monophonic buffers, it works with multi-channel buffers by treating them
                as de-interleaved. See the `Index` UGen for details.
            </text>
            <!-- TODO: example -->
            <see>ugen.Index</see>
            <see>ugen.WrapIndex</see>
            <see>ugen.IndexL</see>
        </doc>
    </ugen>
    <ugen name="WrapIndex" reads-buf="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="buf" type="buf">
            <doc>
                The buffer to read from.
            </doc>
        </arg>
        <arg name="in" default="0">
            <doc>
                The sample index into the buffer. This is truncated to an integer automatically.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen which reads a single sample value from a buffer at a given index.

                It uses the `in` argument as index into the buffer, truncating that argument to an integer.
                Out-of-range index values are wrapped around the valid range. For example, if the buffer
                has four samples, index 4 is wrapped to index 0, index 5 is wrapped to index 1, index
                -1 is wrapped to index 3, index -2 is wrapped to index 2, etc.

                While designed for monophonic buffers, it works with multi-channel buffers by treating them
                as de-interleaved. See the `Index` UGen for details.
            </text>
            <!-- TODO: example -->
            <see>ugen.Index</see>
            <see>ugen.FoldIndex</see>
            <see>ugen.IndexL</see>
        </doc>
    </ugen>
    <ugen name="IndexInBetween" reads-buf="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="buf" type="buf">
            <doc>
                The buffer to search in.
            </doc>
        </arg>
        <arg name="in">
            <doc>
                The input signal whose value is looked up in the buffer.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen which determines the (lowest) index in a buffer at which the two neighboring values
                contain a given input signal. The output index is a decimal whose fractional part
                is suitable for linearly interpolating between the buffer slot values.

                For example, if the Buffer contains values 3, 21, 25, 26 and the input signal has the value 22,
                then the output will be 1.25, because the value 22 is in-between the values stored at indices
                1 and 2 and the linear location of 22 is one-quarter of the way along the interval between them:
                21 * (1 - 0.25) + 25 * (1 - 0.75) = 22.

                If the input value is smaller than the first sample, the output will be zero. If the input
                value is larger than any sample in the buffer, the output will be the buffer size minus one.

                While designed for monophonic buffers, it works with multi-channel buffers by treating them
                as de-interleaved. For example, if the buffer has two frames and two channels, and the algorithm
                finds the frame 1 in channel 0, the reported index is 2 (frame * numChannels + channel).

                `IndexInBetween` is the complement of the `IndexL` UGen.
            </text>
            <!-- TODO: example -->
            <see>ugen.DetectIndex</see>
            <see>ugen.IndexL</see>
        </doc>
    </ugen>
    <ugen name="DetectIndex" reads-buf="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="buf" type="buf"/>
        <arg name="in"/>
        <doc>
            <text>
                A UGen which determines the index in a buffer at which the value matches a given
                input signal. If the input value is not found, it outputs -1.

                For example, if the buffer contains values 5, 3, 2, 8, and the input signal is 3, the
                output will be 1. If the input is 3.001, the output will be -1. Unlike `IndexInBetween`,
                this UGen always searches through the entire buffer until the value is found or the
                end has been reached (returning -1).
            </text>
            <!-- TODO: example -->
            <see>ugen.Index</see>
            <see>ugen.IndexInBetween</see>
        </doc>
    </ugen>
    <ugen name="Shaper" reads-buf="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="buf" type="buf">
            <doc>
                buffer filled in wavetable format containing the transfer function.
            </doc>
        </arg>
        <arg name="in">
            <doc>
                signal to be fed into the wave shaper
            </doc>
        </arg>
        <doc>
            <text>
                A waveshaping UGen. Waveshaping is a the process of translating an input signal by
                indexing a table (buffer).

                '''Advanced notes:''' wavetable format:
                {{{
                Signal: [a0, a1, a2...]
                Wavetable: [2*a0-a1, a1-a0, 2*a1-a2, a2-a1, 2*a2-a3, a3-a2...]
                }}}
                This strange format is not a standard linear interpolation (integer + frac), but for (integer part -1)
                and (1+frac)) due to some efficient maths for integer to float conversion in the underlying C code.
            </text>
            <!-- TODO: example -->
            <see>ugen.Index</see>
            <see>ugen.WrapIndex</see>
        </doc>
    </ugen>
    <!-- this should exist according to plugin sources...
    <ugen name="SigOsc"/>
    -->
    <ugen name="FSinOsc">
        <rate name="audio"/>
        <rate name="control"/>
        <arg name="freq" default="440.0">
            <doc>
                frequency in Hertz
            </doc>
        </arg>
        <arg name="iphase" default="0.0" init="true">
            <doc>
                initial phase of the oscillator in radians. This cannot be modulated. A value
                of `0.5 Pi` means the output starts at +1. A value of `1.5 Pi` means the output
                starts at -1,
            </doc>
        </arg>
        <doc>
            <text>
                A sine oscillator UGen using a fast approximation. It uses a ringing filter and is less
                CPU expensive than `SinOsc`. However, the amplitude of the wave will vary with frequency.
                Generally the amplitude will go down when the frequency rises and it will go up as if the
                frequency is lowered.

                '''Warning''': In the current implementation, the amplitude can blow up if the frequency
                is modulated by certain alternating signals (e.g. abruptly by `TRand`).
            </text>
            <example name="plain oscillator">
                FSinOsc.ar(441) * 0.2
            </example>
            <see>ugen.SinOsc</see>
            <see>ugen.SinOscFB</see>
        </doc>
    </ugen>
    <ugen name="SinOsc">
        <rate name="audio"/>
        <rate name="control"/>
        <arg name="freq" default="440.0">
            <doc>
                frequency in Hertz
            </doc>
        </arg>
        <arg name="phase" default="0.0">
            <doc>
                phase offset or modulator in radians
            </doc>
        </arg>
        <doc>
            <text>
                A sinusoidal (sine tone) oscillator UGen.
                This is the same as `Osc` except that it uses a built-in interpolating sine table of 8192 entries.

                '''Note''' that currently (SC 3.7.x), the first frame generated is not zero (i.e. the value of
                the sine oscillation at time zero) but the value at time `1 / SampleRate.ir`.
            </text>
            <!-- TODO: example -->
            <see>ugen.Osc</see>
            <see>ugen.FSinOsc</see>
            <see>ugen.SinOscFB</see>
        </doc>
    </ugen>
    <ugen name="SinOscFB">
        <rate name="audio"/>
        <rate name="control"/>
        <arg name="freq" default="440.0">
            <doc>
                frequency in Hertz
            </doc>
        </arg>
        <arg name="feedback" default="0.0">
            <doc>
                the amplitude of phase feedback in radians.
                a value of zero produces a clean sine wave.
            </doc>
        </arg>
        <doc>
            <text>
                A sine oscillator UGen that has phase modulation feedback. Its output plugs back into the
                phase input, allowing a modulation between a sine wave and a sawtooth-like wave.
                "Over-modulation" causes chaotic oscillation. It may be useful to simulate feedback FM synths.
            </text>
            <example name="mouse-controlled feedback">
                SinOscFB.ar(441, MouseX.kr(0, math.Pi)) * 0.1
            </example>
            <see>ugen.SinOsc</see>
            <see>ugen.FSinOsc</see>
        </doc>
    </ugen>
    <ugen name="VOsc" reads-buf="true">
        <rate name="audio"/>
        <rate name="control"/>
        <arg name="bufPos"/> <!-- type="buf" ? -->
        <arg name="freq" default="440.0"/>
        <arg name="phase" default="0.0"/>
        <!-- TODO: doc -->
    </ugen>
    <ugen name="VOsc3" reads-buf="true">
        <rate name="audio"/>
        <rate name="control"/>
        <arg name="bufPos"/> <!-- type="buf" ? -->
        <arg name="freq1" default="110.0"/>
        <arg name="freq2" default="220.0"/>
        <arg name="freq3" default="440.0"/>
        <!-- TODO: doc -->
    </ugen>
    <ugen name="Osc" reads-buf="true">
        <rate name="audio"/>
        <rate name="control"/>
        <arg name="buf" type="buf">
            <doc>
                the buffer with the wavetable in special
                wavetable format. the size must be a power of two.
            </doc>
        </arg>
        <arg name="freq" default="440.0">
            <doc>
                frequency of table scans in Hz, corresponding to
                the fundamental frequency of the sound.
            </doc>
        </arg>
        <arg name="phase" default="0.0">
            <doc>
                phase offset or modulator in radians. The value should be within the range of
                -8*Pi to +8*Pi.
            </doc>
        </arg>
        <doc>
            <text>
                An oscillator UGen that linearly interpolates a wavetable. It has
                frequency and phase modulation inputs. The wave table is provided by a buffer
                filled with a wavetable format signal. The buffer size must be a power of 2.

                The buffer is typically filled by a `b_gen` OSC message.
                (e.g. `buf.sine1(...)`, `buf.sine2(...)` etc.)
            </text>
            <example name="sine1 example" type="full">
                val b = Buffer.alloc(s, 512)
                b.sine1(partials = (1 to 6).map(1.0f / _),
                  normalize = true, wavetable = true, clear = true)

                play {
                  Osc.ar(b.id, 200) * 0.3
                }
            </example>
            <see>ugen.OscN</see>
            <see>ugen.COsc</see>
            <see>ugen.VOsc</see>
            <see>ugen.SinOsc</see>
        </doc>
    </ugen>
    <ugen name="OscN" reads-buf="true">
        <rate name="audio"/>
        <rate name="control"/>
        <arg name="buf" type="buf"/>
        <arg name="freq" default="440.0"/>
        <arg name="phase" default="0.0"/>
        <!-- TODO: doc -->
    </ugen>
    <ugen name="COsc" reads-buf="true">
        <rate name="audio"/>
        <arg name="buf" type="buf"/>
        <arg name="freq" default="440.0"/>
        <arg name="beats" default="0.5"/>
        <!-- TODO: doc -->
    </ugen>
    <ugen name="Formant">
        <rate name="audio"/>
        <arg name="fundFreq" default="440.0">
            <doc>
                Fundamental frequency in Hertz.
                Read at control-rate, so if input is audio-rate, it will be sub-sampled.
            </doc>
        </arg>
        <arg name="formFreq" default="1760.0">
            <doc>
                Formant frequency in Hertz. This determines the overtone(s) most
                prominently perceived.
                Read at control-rate, so if input is audio-rate, it will be sub-sampled.
            </doc>
        </arg>
        <arg name="bw" default="880.0">
            <doc>
                Pulse width frequency in Hertz. Controls the bandwidth of the formant.
                Must be greater than or equal to `fundFreq`.
                Read at control-rate, so if input is audio-rate, it will be sub-sampled.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that generates a set of harmonics around a formant frequency
                at a given fundamental frequency.
            </text>
            <example name="modulate fundamental frequency">
                Formant.ar(XLine.kr(400, 1000, 8), 2000, 800) * 0.2
            </example>
            <example name="modulate formant frequency">
                Formant.ar(200, XLine.kr(400, 4000, 8), 200) * 0.2
            </example>
            <example name="modulate the bandwidth">
                Formant.ar(400, 2000, XLine.kr(800, 8000, 8)) * 0.2
            </example>
        </doc>
    </ugen>
    <ugen name="Blip">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="440.0">
            <doc>
                Fundamental frequency in Hertz
            </doc>
        </arg>
        <arg name="numHarm" default="200">
            <doc>
                Number of harmonics. This will be automatically limited to avoid aliasing.
            </doc>
        </arg>
        <doc>
            <text>
                Band Limited ImPulse generator UGen. All harmonics have equal amplitude.
                This is the equivalent of 'buzz' in Music-N languages.
                It is capable of cross-fading during a control period block if the number of
                harmonics changes, avoiding audible pops.
            </text>
            <example name="modulate fundamental frequency">
                Blip.ar(XLine.kr(20000, 200, 6), 100) * 0.2
            </example>
            <example name="modulate number of harmonics">
                Blip.ar(200, Line.kr(1, 100, 20)) * 0.2
            </example>
            <see>ugen.Impulse</see>
        </doc>
    </ugen>
    <ugen name="Saw">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="440.0">
            <doc>
                Fundamental frequency in Hertz
            </doc>
        </arg>
        <doc>
            <text>
                A band-limited sawtooth wave generator UGen.
            </text>
            <example name="modulate frequency">
                Saw.ar(XLine.kr(40, 4000, 6)) * 0.2
            </example>
            <example name="two saws with different frequencies through resonant filter">
                RLPF.ar(Saw.ar(Seq(100, 250)) * 0.2, XLine.kr(8000, 400, 6), 0.05)
            </example>
            <see>ugen.LFSaw</see>
        </doc>
    </ugen>
    <ugen name="Pulse">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="440.0">
            <doc>
                Fundamental frequency in Hertz
            </doc>
        </arg>
        <arg name="width" default="0.5">
            <doc>
                Pulse width ratio from zero to one. `0.5` makes a square wave.
            </doc>
        </arg>
        <doc>
            <text>
                A band-limited pulse wave generator UGen, capable of pulse width modulation.
            </text>
            <example name="modulate frequency">
                Pulse.ar(XLine.kr(40, 4000, 6)) * 0.2
            </example>
            <example name="modulate pulse width">
                Pulse.ar(200, Line.kr(0.01, 0.99, 8)) * 0.2
            </example>
            <example name="two pulses with different frequencies through resonant filter">
                RLPF.ar(Pulse.ar(Seq(100, 250)) * 0.2, XLine.kr(8000, 400, 6), 0.05)
            </example>
            <see>ugen.LFPulse</see>
        </doc>
    </ugen>

    <ugen name="Klang">
        <rate name="audio" implied="true"/>
        <arg name="freqScale" default="1.0" init="true" pos="1"/>
        <arg name="freqOffset" default="0.0" init="true" pos="2"/>
        <arg name="specs" variadic="true" init="true" pos="0"/>
        <!-- TODO: doc -->
    </ugen>
    <ugen name="Klank">
        <rate name="audio" implied="true"/>
        <arg name="in" pos="1"/>
        <arg name="freqScale" default="1.0" init="true" pos="2"/>
        <arg name="freqOffset" default="0.0" init="true" pos="3"/>
        <arg name="decayScale" default="1.0" init="true" pos="4"/>
        <arg name="specs" variadic="true" init="true" pos="0"/>
        <!-- TODO: doc -->
    </ugen>
</ugens>