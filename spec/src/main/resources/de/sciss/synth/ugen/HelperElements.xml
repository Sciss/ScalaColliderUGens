<!-- these are graph elements that do not constitute genuine UGens -->
<ugens revision="6">
    <ugen name="ChannelIndices" type-id="400" helper="true" sourcecode="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="in">
            <doc>
                the element whose indices to produce
            </doc>
        </arg>
        <doc>
            <text>
                A graph element that produces an integer sequence
                from zero until the number-of-channels of the input element.
            </text>
            <example name="cross-faded select">
                val sines: GE = Seq.fill(4)(SinOsc.ar(ExpRand(200, 2000)))
                val index   = MouseX.kr(lo = 0, hi = NumChannels(sines) - 1)
                val indices = ChannelIndices(sines)
                indices.poll(0, "indices")
                val select  = 1 - (indices absDif index).min(1)
                val sig     = Mix(sines * select)
                sig * 0.2
            </example>
            <see>ugen.NumChannels</see>
        </doc>
    </ugen>
    <ugen name="ChannelProxy" type-id="401" helper="true" sourcecode="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="elem">
            <doc>
                a multi-channel element from which to select a channel.
            </doc>
        </arg>
        <arg name="index" type="int">
            <doc>
                channel index starting at zero. It automatically wraps around
                the actual number of channels the input `elem` expands to.
            </doc>
        </arg>
        <doc>
            <text>
                A helper graph element that selects a particular output channel of
                another element. The index is an `Int` and thus cannot be
                determined at graph expansion time. If this is desired, the
                `Select` UGen can be used.

                Usually the graph element operator `out` can be used
                instead of explicitly writing `ChannelProxy`. Thus
                `elem.out(index)` is equivalent to `ChannelProxy(elem, index)`.
                UGens with a fixed number of outputs often have auxiliary methods
                to access the channels in meaningful way, e.g. `Pitch` has
                method `freq` and `hasFreq`, which are equivalent to
                `pitch.out(0)` and `pitch.out(1)`.

                Because ScalaCollider allows late-expanding
                graph elements, we have no direct way to get some
                array of a UGen's outputs.
            </text>
            <example name="frequency of a pitch estimator">
                val sin = SinOsc.ar(MouseX.kr(10, 10000, warp = 1))
                val pch = Pitch.kr(sin)
                val freq = pch.out(0)  // same as pch.freq
                freq.poll(label = "freq")
                ()
            </example>
            <see>ugen.NumChannels</see>
            <see>ugen.Select</see>
            <see>ugen.ChannelRangeProxy</see>
        </doc>
    </ugen>
    <ugen name="ChannelRangeProxy" type-id="402" helper="true" sourcecode="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="elem">
            <doc>
                a multi-channel element from which to select channels.
            </doc>
        </arg>
        <arg name="from" type="int">
            <doc>
                the first index (inclusive) of the channel range, counting from zero.
            </doc>
        </arg>
        <arg name="until" type="int">
            <doc>
                the end index (exclusive) of the channel range, counting from zero.
            </doc>
        </arg>
        <arg name="step" type="int">
            <doc>
                the increment from index to index in the range. A value of one
                means all channels from `from` until `until` will be selected. A
                value of two means, every second channel will be skipped. A negative
                value can be used to count down from high to low indices.
            </doc>
        </arg>
        <doc>
            <text>
                A helper graph element that selects a particular range of
                output channel of another element. The range is specified with
                integers and thus cannot be determined at graph expansion time.
                If this is desired, the `Select` UGen can be used.

                Usually the graph element operator `out` along with
                a standard Scala `Range` argument can be used
                instead of explicitly writing `ChannelRangeProxy`. Thus
                `elem.out(0 until 4)` selects the first four channels and is
                equivalent to `ChannelRangeProxy(elem, from = 0, until = 4, step = 1)`.

                Behind the scene, `ChannelProxy` instances are created, thus
                `ChannelRangeProxy(x, a, b)` is the same as
                `(a until b).map(ChannelProxy(x, _)): GE`.

                Because ScalaCollider allows late-expanding
                graph elements, we have no direct way to get some
                array of a UGen's outputs.
            </text>
            <!-- TODO: example -->
            <see>ugen.NumChannels</see>
            <see>ugen.Select</see>
            <see>ugen.ChannelProxy</see>
            <see>ugen.RepeatChannels</see>
        </doc>
    </ugen>
    <ugen name="Flatten" type-id="403" helper="true" sourcecode="true">
        <arg name="elem">
            <doc>
                a (possibly multi-channel) element all of whose channels will be
                represented as one flattened element.
            </doc>
        </arg>
        <doc>
            <text>
                A graph element that flattens the channels from a nested multi-channel structure.

                For example, if a UGen with two outputs has an input argument with two
                outputs, this will propagate differently in the multi-channel-expansion
                than a flat representation of the two expanded UGens with each of their
                two own output channels.
            </text>
            <!-- TODO: example -->
            <see>ugen.ChannelIndices</see>
            <see>ugen.Mix</see>
        </doc>
    </ugen>
    <ugen name="LinLin" type-id="404" helper="true" sourcecode="true">
        <arg name="in">
            <doc>
                The input signal to convert.
            </doc>
        </arg>
        <arg name="srcLo" default="0.0">
            <doc>
                The lower limit of input range.
            </doc>
        </arg>
        <arg name="srcHi" default="1.0">
            <doc>
                The upper limit of input range.
            </doc>
        </arg>
        <arg name="dstLo" default="0.0">
            <doc>
                The lower limit of output range.
            </doc>
        </arg>
        <arg name="dstHi" default="1.0">
            <doc>
                The upper limit of output range.
            </doc>
        </arg>
        <doc>
            <text>
                A graph element which maps a linear range to another linear range.
                The equivalent formula is `(in - srcLo) / (srcHi - srcLo) * (dstHi - dstLo) + dstLo`.

                '''Note''': No clipping is performed. If the input signal exceeds the input range,
                the output will also exceed its range.
            </text>
            <example name="oscillator to frequency range">
                val mod = SinOsc.kr(Line.kr(1, 10, 10))
                SinOsc.ar(LinLin(mod, -1, 1, 100, 900)) * 0.1
            </example>
            <see>ugen.LinExp</see>
            <see>ugen.Clip</see>
            <see>ugen.MulAdd</see>
        </doc>
    </ugen>
    <ugen name="Mix" type-id="405" helper="true" sourcecode="true">
        <arg name="elem">
            <doc>
                the graph element whose channels to mix together
            </doc>
        </arg>
        <doc>
            <text>
                A graph element that mixes the channels of a signal together.
                It works like the sclang counterpart.

                The `Mix` companion object contains various useful mixing idioms:

                - `Mix.tabulate(n: Int)(fun: Int => GE)`: corresponds to `Seq.tabulate`
                  and to `Array.fill` in sclang.

                - `Mix.fill(n: Int)(thunk: => GE)`: corresponds to `Seq.fill`.

                - `Mix.seq(elems: GE*)`: A shortcut for `Mix(GESeq(elems: _*))`.

                A separate graph element is `Mix.mono`.
                `Mix.mono(elem: GE)` flattens all channels of
                the input element before summing them, guaranteeing that the result is monophonic.

                Finally, `Mix.fold` is an idiom that not actually adds elements,
                but recursively folds them. Thus,
                `Mix.fold(elem: GE, n: Int)(fun: GE => GE)` is equivalent to
                {{{
                (1 to n).foldLeft(elem) { (res, _) => fun(res) }
                }}}

                `Mix.fold` is often used in the SuperCollider examples to apply a filtering
                process such as reverberation several times. For cases where the iteration
                index is needed, the full form as shown above can be used instead.
            </text>
            <see>ugen.Reduce</see>
            <see>ugen.BinaryOpUGen</see>
            <see>ugen.Mix.Mono</see>
            <example name="non-nested multi-channel signal reduced to mono (1)">
                Mix(SinOsc.ar(440 :: 660 :: Nil)) * 0.2 // --> SinOsc.ar(440) + SinOsc.ar(660)
            </example>
            <example name="non-nested multi-channel signal reduced to mono (2)">
                Mix(Pan2.ar(SinOsc.ar)) * 0.2 // --> left + right
            </example>
            <example name="mix inner channels">
                // --> [left(440) + left(660), right(440) + right(660)]
                Mix(Pan2.ar(SinOsc.ar(440 :: 660 :: Nil))) * 0.2
            </example>
            <example name="enforce monophonic mix">
                // --> left(440) + left(660) + right(440) + right(660)
                Mix.mono(Pan2.ar(SinOsc.ar(440 :: 660 :: Nil))) * 0.2
            </example>
            <example name="combine Mix(), Mix.fill(), Mix.fold()">
                // from original SC examples: reverberated sine percussion
                val d = 6    // number of percolators
                val c = 5    // number of comb delays
                val a = 4    // number of allpass delays

                // sine percolation sound :
                val s = Mix.fill(d) { Resonz.ar(Dust.ar(2.0 / d) * 50, Rand(200, 3200), 0.003) }

                // reverb pre-delay time :
                val z = DelayN.ar(s, 0.048)

                // 'c' length modulated comb delays in parallel :
                val y = Mix(CombL.ar(z, 0.1, LFNoise1.kr(Seq.fill(c)(Rand(0, 0.1))).mulAdd(0.04, 0.05), 15))

                // chain of 'a' allpass delays on each of two channels (2 times 'a' total) :
                val x = Mix.fold(y, a) { in =>
                  AllpassN.ar(in, 0.050, Seq(Rand(0, 0.050), Rand(0, 0.050)), 1)
                }

                // add original sound to reverb and play it :
                s + 0.2 * x
            </example>
            <example name="Mix.tabulate usage">
                // from original SC examples: harmonic swimming
                val f = 50       // fundamental frequency
                val p = 20       // number of partials per channel
                val offset = Line.kr(0, -0.02, 60, doneAction = freeSelf) // causes sound to separate and fade
                Mix.tabulate(p) { i =>
                  FSinOsc.ar(f * (i+1)) * // freq of partial
                    LFNoise1.kr(Seq(Rand(2, 10), Rand(2, 10)))  // amplitude rate
                    .mulAdd(
                      0.02,     // amplitude scale
                      offset    // amplitude offset
                    ).max(0)    // clip negative amplitudes to zero
                }
            </example>
        </doc>
    </ugen>
    <ugen name="Mix.Mono" type-id="406" helper="true" sourcecode="true">
        <arg name="elem">
            <doc>
                the graph element whose channels to mix together
            </doc>
        </arg>
        <doc>
            <text>
                A graph element that mixes the channels of a signal together.
                As opposed to `Mix`, `Mix.Mono` first flattens the input channel's multi-channel layers,
                ensuring that the output is always monophonic.
            </text>
            <see>ugen.Mix</see>
        </doc>
    </ugen>
    <ugen name="NumChannels" type-id="407" helper="true" sourcecode="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="in">
            <doc>
                the element whose number-of-channels to produce
            </doc>
        </arg>
        <doc>
            <text>
                A graph element that produces an integer with number-of-channels
                of the input element.

                Because ScalaCollider allows late-expanding
                graph elements, we have no direct way to get an integer of some
                array-size of a UGen's outputs. On the other hand, there may be
                sound synthesis definitions that can abstract over the number of
                channels at definition time.
            </text>
            <example name="amplitude compensation">
                val sines: GE = Seq.fill(8)(SinOsc.ar(ExpRand(200, 2000)))
                val norm = Mix(sines) / NumChannels(sines)   // guarantee that they don't clip
                norm * 0.2
            </example>
            <see>ugen.ChannelIndices</see>
        </doc>
    </ugen>
    <ugen name="Nyquist" type-id="408" helper="true" sourcecode="true">
        <rate name="scalar" implied="true" method="apply"/>
        <doc>
            <text>
                A helper graph element equivalent to `SampleRate.ir * 0.5`.
            </text>
            <example name="as frequency argument">
                Dust.ar(Nyquist()).pow(8)
            </example>
            <see>ugen.SampleRate</see>
        </doc>
    </ugen>
    <ugen name="Pad" type-id="409" helper="true" sourcecode="true">
        <arg name="in">
            <doc>
                the element to replicate
            </doc>
        </arg>
        <arg name="to">
            <doc>
                the reference element that controls the multi-channel expansion.
                the signal itself is not used or output by `Pad`.
            </doc>
        </arg>
        <doc>
            <text>
                A graph element that controls the multi-channel expansion of
                its `in` argument to match the `to` argument by padding (extending
                and wrapping) it.
            </text>
            <!-- TODO: example -->
        </doc>
    </ugen>
    <ugen name="PhysicalIn" type-id="410" helper="true" sourcecode="true" fragment="true" reads-bus="true">
        <rate name="audio" implied="true"/>
    </ugen>
    <ugen name="PhysicalOut" type-id="411" helper="true" sourcecode="true" writes-bus="true">
        <no-outputs/>
        <rate name="audio" implied="true"/>
        <arg name="indices" default="0">
            <doc>
                the physical index to write to (beginning at zero which corresponds to
                the first channel of the audio interface or sound driver). may be a
                multichannel argument to specify discrete channels. In this case, any
                remaining channels in `in` are associated with the last bus index offset.
            </doc>
        </arg>
        <arg name="in">
            <doc>
                the signal to write
            </doc>
        </arg>
        <doc>
            <text>
                A graph element which writes to a connected sound driver output. This is a convenience
                element for `Out` with the ability to provide a set of discrete indices to which
                corresponding channels of the input signal are mapped, whereas multichannel expansion
                with respect to the index argument of `Out` typically do not achieve what you expect.
            </text>
            <example name="flip left and right when writing a stereo signal">
                val indices = Seq(1, 0)
                val in:GE   = Seq(SinOsc.ar * LFPulse.ar(4), WhiteNoise.ar)
                // sine appears on the right channel, and noise on the left
                PhysicalOut(indices, in * 0.2)
            </example>
            <see>ugen.Out</see>
            <see>ugen.PhysicalIn</see>
        </doc>
    </ugen>
    <ugen name="Reduce" type-id="412" helper="true" sourcecode="true" fragment="true" />
    <ugen name="RepeatChannels" type-id="413" helper="true" sourcecode="true">
        <arg name="a">
            <doc>
                the signal whose channels to repeat
            </doc>
        </arg>
        <arg name="num" type="int">
            <doc>
                the number of repetitions for each input channel
            </doc>
        </arg>
        <doc>
            <text>
                An auxiliary graph element that repeats
                the channels of an input signal, allowing
                for example for an exhaustive element-wise
                combination with another signal.

                Normally, the way multi-channel expansion
                works is that when two signals are combined,
                the output signal has a number of channels
                that is the ''maximum'' of the individual number
                of channels, and channels will be automatically
                wrapped around.

                For example, in `x * y` if `x` has three and
                `y` has five channels, the result expands to

                {{{
                Seq[GE](
                  x.out(0) * y.out(0),
                  x.out(1) * y.out(1),
                  x.out(2) * y.out(2),
                  x.out(0) * y.out(3),
                  x.out(1) * y.out(4)
                )
                }}}

                Using this element, we can enforce the appearance
                of all combinations of channels, resulting in a signal
                whose number of channels is the ''sum'' of the individual
                number of channels.

                For example, `RepeatChannels(x, 5)` expands to

                {{{
                Seq[GE](
                  x.out(0), x.out(0), x.out(0), x.out(0), x.out(0),
                  x.out(1), x.out(1), x.out(1), x.out(1), x.out(1),
                  x.out(2), x.out(2), x.out(2), x.out(2), x.out(2)
                )
                }}}

                And `RepeatChannels(x, 5) * y` accordingly expands to
                the fifteen-channels signal

                {{{
                Seq[GE](
                  x.out(0) * y.out(0), x.out(0) * y.out(1), x.out(0) * y.out(2), x.out(0) * y.out(3), x.out(0) * y.out(4),
                  x.out(1) * y.out(0), x.out(1) * y.out(1), x.out(1) * y.out(2), x.out(1) * y.out(3), x.out(1) * y.out(4),
                  x.out(2) * y.out(0), x.out(2) * y.out(1), x.out(2) * y.out(2), x.out(2) * y.out(3), x.out(2) * y.out(4)
                )
                }}}
            </text>
            <!-- TODO: example -->
            <see>ugen.ChannelRangeProxy</see>
        </doc>
    </ugen>
    <ugen name="Silent" type-id="414" helper="true" sourcecode="true">
        <rate name="audio" implied="true"/>
        <arg name="numChannels" type="int" default="1">
            <doc>
                the number of output channels
            </doc>
        </arg>
        <doc>
            <text>
                A graph element that produces a constant silent
                (zero) audio-rate output signal.
            </text>
            <!-- TODO: example -->
            <see>ugen.DC</see>
        </doc>
    </ugen>
    <ugen name="SplayAz" type-id="415" helper="true" sourcecode="true">
        <rate name="audio"/>
        <arg name="numChannels" type="int">
            <doc>
                the number of output channels
            </doc>
        </arg>
        <arg name="in">
            <doc>
                the input signal
            </doc>
        </arg>
        <arg name="spread" default="1.0">
            <doc>
                the spacing between input channels with respect to the output panning
            </doc>
        </arg>
        <arg name="center" default="0.0">
            <doc>
                the position of the first channel (see `PanAz`)
            </doc>
        </arg>
        <arg name="level" default="1.0">
            <doc>
                a global gain factor (see `PanAz`)
            </doc>
        </arg>
        <arg name="width" default="2.0">
            <doc>
                the `width` parameter for each `PanAz`
            </doc>
        </arg>
        <arg name="orient" default="0.0">
            <doc>
                the `orient` parameter for each `PanAz`
            </doc>
        </arg>
        <doc>
            <text>
                A graph element that spreads a sequence of input channels across a ring of output channels.
                This works by feeding each input channel through a dedicated `PanAz` UGen, and mixing the
                results together.

                The panning position of each input channel with index `ch` is calculated by the formula:
                {{{
                val pf = 2.0 / (num-in-channels - 1) * (num-out-channels - 1) / num-out-channels
                ch * pf + center
                }}}
            </text>
            <!-- TODO: example -->
            <see>ugen.PanAz</see>
        </doc>
    </ugen>
    <ugen name="WrapOut" type-id="416" helper="true" sourcecode="true" fragment="true" writes-bus="true">
        <no-outputs />
    </ugen>
    <ugen name="Zip" type-id="417" helper="true" sourcecode="true" fragment="true" />

    <!-- other helpers -->
    <ugen name="GESeq" type-id="418" helper="true" sourcecode="true" fragment="true" />
    <ugen name="UGenInSeq" type-id="419" helper="true" sourcecode="true" fragment="true" />
</ugens>