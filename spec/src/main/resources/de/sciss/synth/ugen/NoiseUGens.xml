<ugens revision="5">
    <!-- all documented -->
    <ugen name="WhiteNoise" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="mul" default="1.0" type="mul">
            <doc>
                Not actually a UGen input, this argument produces a multiplication of the output
                by this factor. A multi-channel `mul` argument will cause the generation of
                multiple independent noise generators.
            </doc>
        </arg>
        <doc>
            <text>
                A noise generator UGens whose spectrum has equal power at all frequencies. Output values
                range from `-1` to `+1` (before being multiplied by `mul`). The RMS is approx. -4.8 dB.
            </text>
            <example name="plain noise">
                WhiteNoise.ar(Seq(0.25, 0.25))
            </example>
            <see>ugen.PinkNoise</see>
            <see>ugen.BrownNoise</see>
            <see>ugen.GrayNoise</see>
            <see>ugen.ClipNoise</see>
            <see>ugen.RandSeed</see>
            <see>ugen.LFNoise0</see>
            <see>ugen.Dust</see>
        </doc>
    </ugen>
    <ugen name="GrayNoise" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="mul" default="1.0" type="mul">
            <doc>
                Not actually a UGen input, this argument produces a multiplication of the output
                by this factor. A multi-channel `mul` argument will cause the generation of
                multiple independent noise generators.
            </doc>
        </arg>
        <doc>
            <text>
                A noise generator UGen which results from flipping random bits in a word. The resulting
                waveform looks like a sample-and-hold function with values between `-1` and `+1`
                (before being multiplied by `mul`).

                This type of noise has a high RMS level relative to its peak to peak level. With approx. -4.8 dB,
                the RMS is the same as white noise, but the spectrum is emphasized towards lower frequencies.
            </text>
            <example name="plain noise">
                GrayNoise.ar(Seq(0.2, 0.2))
            </example>
            <see>ugen.WhiteNoise</see>
            <see>ugen.PinkNoise</see>
            <see>ugen.BrownNoise</see>
            <see>ugen.ClipNoise</see>
            <see>ugen.RandSeed</see>
            <see>ugen.LFNoise0</see>
            <see>ugen.Dust</see>
        </doc>
    </ugen>
    <ugen name="ClipNoise" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="mul" default="1.0" type="mul">
            <doc>
                Not actually a UGen input, this argument produces a multiplication of the output
                by this factor. A multi-channel `mul` argument will cause the generation of
                multiple independent noise generators.
            </doc>
        </arg>
        <doc>
            <text>
                A noise generator UGen whose values are either `-1` or `+1` (before being multiplied by `mul`).
                This produces the maximum energy (an RMS of 0 dB) for the least peak to peak amplitude.
            </text>
            <example name="plain noise">
                ClipNoise.ar(Seq(0.2, 0.2))
            </example>
            <see>ugen.LFClipNoise</see>
            <see>ugen.WhiteNoise</see>
            <see>ugen.PinkNoise</see>
            <see>ugen.BrownNoise</see>
            <see>ugen.GrayNoise</see>
            <see>ugen.RandSeed</see>
            <see>ugen.LFNoise0</see>
            <see>ugen.Dust</see>
        </doc>
    </ugen>
    <ugen name="PinkNoise" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="mul" default="1.0" type="mul">
            <doc>
                Not actually a UGen input, this argument produces a multiplication of the output
                by this factor. A multi-channel `mul` argument will cause the generation of
                multiple independent noise generators.
            </doc>
        </arg>
        <doc>
            <text>
                A noise generator UGen whose spectrum falls off in power by 3 dB per octave. This gives equal
                power over the span of each octave. This version gives 8 octaves of pink noise.

                The values produced by this UGen were observed to lie with very high probability between
                approx. `-0.65` and `+0.81` (before being multiplied by `mul`). The RMS is approx. -16 dB.
            </text>
            <example name="plain noise">
                ClipNoise.ar(Seq(0.2, 0.2))
            </example>
            <see>ugen.WhiteNoise</see>
            <see>ugen.BrownNoise</see>
            <see>ugen.GrayNoise</see>
            <see>ugen.ClipNoise</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="BrownNoise" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="mul" default="1.0" type="mul">
            <doc>
                Not actually a UGen input, this argument produces a multiplication of the output
                by this factor. A multi-channel `mul` argument will cause the generation of
                multiple independent noise generators.
            </doc>
        </arg>
        <doc>
            <text>
                A noise generator UGen whose spectrum falls off in power by 6 dB per octave. The values produced
                by this UGen lie between `-1` and `+1`, the RMS is approx. -4.8 dB (the same as white noise).
            </text>
            <example name="plain noise">
                BrownNoise.ar(Seq(0.2, 0.2))
            </example>
            <see>ugen.WhiteNoise</see>
            <see>ugen.PinkNoise</see>
            <see>ugen.GrayNoise</see>
            <see>ugen.ClipNoise</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="Dust" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="density" default="1.0">
            <doc>
                the average number of impulses per second
            </doc>
        </arg>
        <doc>
            <text>
                A UGen generating random impulses with values ranging from
                `0` to `+1`. The pulse duration is one sample for audio-rate
                and one block for control-rate operation.

                The approximate RMS energy is `(density/sr).log2 * 3 - 4.8`
                where `sr` is the sample-rate. For example, at 44.1 kHz, a
                density of 1000 Hz yields an RMS of approx. -21.2 dB.
            </text>
            <example name="decreasing density">
                Dust.ar(XLine.kr(20000, 2, Seq(20, 20))) * 0.5
            </example>
            <see>ugen.Dust2</see>
            <see>ugen.TRand</see>
            <see>ugen.RandSeed</see>
            <see>ugen.ClipNoise</see>
            <see>ugen.GrayNoise</see>
            <see>ugen.CoinGate</see>
        </doc>
    </ugen>
    <ugen name="Dust2" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="density" default="1.0">
            <doc>
                the average number of impulses per second
            </doc>
        </arg>
        <doc>
            <text>
                A UGen generating random impulses with values ranging from
                `-1` to `+1`. The pulse duration is one sample for audio-rate
                and one block for control-rate operation.
            </text>
            <example name="decreasing density">
                Dust2.ar(XLine.kr(20000, 2, Seq(20, 20))) * 0.5
            </example>
            <see>ugen.Dust</see>
            <see>ugen.TRand</see>
            <see>ugen.RandSeed</see>
            <see>ugen.ClipNoise</see>
            <see>ugen.CoinGate</see>
        </doc>
    </ugen>
    <ugen name="Crackle" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="chaos" default="1.5">
            <doc>
                A parameter of the chaotic function with useful values from just below 1.0 to just above 2.0.
                Towards 2.0 the sound crackles. Values greater than 2.01 are not safe, as the UGen can
                switch to outputting NaNs.
                A early more crackling sound appears with a value of `1.33`.
            </doc>
        </arg>
        <doc>
            <text>
                A noise generator UGen based on a chaotic function. Output values lie between zero and one.
                Although this is a deterministic process, it is randomly seeded.
            </text>
            <example name="increasing parameter">
                val chaos = Line.kr(1.0, 2.01, 15)
                chaos.poll(2, "chaos")
                Crackle.ar(Seq(chaos, chaos)) * 0.5
            </example>
            <see>ugen.Dust</see>
            <see>ugen.LatoocarfianN</see>
            <see>ugen.Logistic</see>
        </doc>
    </ugen>
    <ugen name="Logistic">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="chaos" default="3.0">
            <doc>
                a parameter of the chaotic function with useful values from 0.0 to 4.0.
                Chaotic behavior occurs from 3.57 up. Using values outside this range can make
                the UGen blow up, resulting in NaNs.
            </doc>
        </arg>
        <arg name="freq" default="1000.0">
            <doc>
                Frequency of calculation in Hertz. The value is limited by the sampling rate.
            </doc>
        </arg>
        <arg name="init" default="0.5">
            <doc>
                Initial value of the recursive function
            </doc>
        </arg>
        <doc>
            <text>
                A noise generator UGen based on the logistic map. Its formula is
                {{{
                y[n+1] = chaos * y[n] * (1.0 - y[n])
                }}}
            </text>
            <example name="increasing parameter">
                Logistic.ar(Line.kr(3.55, 4.0, 15), 1000) * 0.5
            </example>
            <see>ugen.Crackle</see>
            <see>ugen.LatoocarfianN</see>
        </doc>
    </ugen>
    <ugen name="Hasher">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="in">
            <doc>
                input to calculate the hash function for
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that returns a unique output value from zero to one for each input value according to
                a hash function. The same input value will always produce the same output value.
                The input values can have any range.
            </text>
            <example name="scramble mouse motion">
                SinOsc.ar(
                  Hasher.kr(MouseX.kr(0,10)).madd(300, 500)
                ) * 0.2
            </example>
            <example name="distort pulse wave">
                val lag  = MouseY.kr(0.001, 0.1, 1)
                val freq = MouseX.kr(1, 500, 1)
                Hasher.ar(Lag.ar(LFPulse.ar(freq), lag)) * 0.2
            </example>
        </doc>
    </ugen>
    <ugen name="MantissaMask">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="in">
            <doc>
                input signal to quantize
            </doc>
        </arg>
        <arg name="bits" default="3">
            <doc>
                The number of mantissa bits to preserve, from 0 to 23.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that masks off bits in the mantissa of the floating point sample value. This introduces
                a quantization noise, but is less severe than linearly quantizing the signal.
            </text>
            <example name="mouse-x controls resolution">
                val bits = MouseX.kr(0, 12)
                MantissaMask.ar(SinOsc.ar(SinOsc.kr(0.2).madd(400, 500)) * 0.4, bits)
            </example>
        </doc>
    </ugen>
    <ugen name="LFClipNoise" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that randomly generates the values -1 or +1 at a rate given by the nearest integer
                division of the sample rate by the frequency argument. The difference to `LFClipNoise` is
                that this UGen quantizes time to the nearest integer division of the sample-rate, and
                the frequency input is only polled at the moment a new output value is scheduled.
            </text>
            <example name="generator">
                LFClipNoise.ar(500) * 0.2
            </example>
            <example name="random panning">
                val pos = LFClipNoise.ar(4)
                Pan2.ar(PinkNoise.ar, pos)
            </example>
            <example name="modulate frequency">
                LFClipNoise.ar(XLine.kr(100, 10000, 20)) * 0.2
            </example>
            <see>ugen.ClipNoise</see>
            <see>ugen.LFNoise0</see>
            <see>ugen.LFDClipNoise</see>
        </doc>
    </ugen>
    <ugen name="LFNoise0" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate random values.
            </doc>
        </arg>
        <doc>
            <text>
                A step noise UGen. It generates abruptly changing random values
                between `-1` and `+1` at a rate given by the `freq` argument.

                The frequency is quantized to the nearest integer division of the sample rate, and
                changes in frequency are only picked up at the next trigger. In contrast,
                variant `LFDNoise0` has precise frequency and reacts to frequency changes instantly.
            </text>
            <example name="plain noise">
                LFNoise0.ar(1000) * 0.25
            </example>
            <see>ugen.LFDNoise0</see>
            <see>ugen.LFNoise1</see>
            <see>ugen.LFNoise2</see>
            <see>ugen.TRand</see>
            <see>ugen.WhiteNoise</see>
            <see>ugen.Dust</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="LFNoise1" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate new breakpoints.
            </doc>
        </arg>
        <doc>
            <text>
                A ramp noise UGen. It generates line segments whose start and
                end points are chosen randomly between `-1` and `+1`. New breakpoints are generated at
                a specified frequency.

                The frequency is quantized to the nearest integer division of the sample rate, and
                changes in frequency are only picked up at the next trigger. In contrast,
                variant `LFDNoise1` has precise frequency and reacts to frequency changes instantly.
            </text>
            <example name="plain noise">
                LFNoise1.ar(1000) * 0.25
            </example>
            <see>ugen.LFDNoise1</see>
            <see>ugen.LFNoise0</see>
            <see>ugen.LFNoise2</see>
            <see>ugen.Ramp</see>
        </doc>
    </ugen>
    <ugen name="LFNoise2" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="freq" default="500.0">
            <doc>
                rate at which to generate new breakpoints.
            </doc>
        </arg>
        <doc>
            <text>
                A quadratically interpolating noise UGen. This interpolation happens between breakpoints
                chosen randomly between `-1` and `+1` at a specified frequency.

                The frequency is quantized to the nearest integer division of the sample rate, and
                changes in frequency are only picked up at the next trigger. In contrast,
                variant `LFDNoise3` has precise frequency and reacts to frequency changes instantly.

                '''Note:''' Due to the interpolation, the output values can occasionally extend beyond
                the normal range of -1 to +1, if the frequency varies in certain ways.
            </text>
            <example name="plain noise">
                LFNoise2.ar(1000) * 0.25
            </example>
            <see>ugen.LFDNoise3</see>
            <see>ugen.LFNoise0</see>
            <see>ugen.LFNoise1</see>
        </doc>
    </ugen>
    <ugen name="Rand" random="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="lo" default="0.0">
            <doc>
                lower limit of the output range
            </doc>
        </arg>
        <arg name="hi" default="1.0">
            <doc>
                upper limit of the output range
            </doc>
        </arg>
        <doc>
            <text>
                A scalar UGen that generates a single random decimal value, using a uniform distribution from
                `lo` to `hi`.
            </text>
            <example name="random sine frequencies">
                val m = Mix.fill(10)(FSinOsc.ar(Rand(200.0, 800.0)))
                m * Line.kr(0.025, 0, 4, doneAction = freeSelf)
            </example>
            <see>ugen.IRand</see>
            <see>ugen.TRand</see>
            <see>ugen.ExpRand</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="IRand" random="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="lo" default="0">
            <doc>
                lower limit of the output range
            </doc>
        </arg>
        <arg name="hi" default="127">
            <doc>
                upper limit of the output range (inclusive)
            </doc>
        </arg>
        <doc>
            <text>
                A scalar UGen that generates a single random integer value, using a uniform distribution from
                `lo` to `hi`.
            </text>
            <example name="random sine frequencies">
                val m = Mix.fill(10)(FSinOsc.ar(IRand(40, 100).midicps))
                m * Line.kr(0.025, 0, 4, doneAction = freeSelf)
            </example>
            <see>ugen.Rand</see>
            <see>ugen.TIRand</see>
            <see>ugen.ExpRand</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="TRand" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="lo" default="0.0">
            <doc>
                lower limit of the output range
            </doc>
        </arg>
        <arg name="hi" default="1.0">
            <doc>
                upper limit of the output range
            </doc>
        </arg>
        <arg name="trig" type="trig">
            <doc>
                signal to trigger new random number
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that generates a new random decimal value each time it is triggered,
                using a uniform distribution from `lo` to `hi`.
            </text>
            <example name="random sine frequencies, triggered by mouse button">
                val tr = MouseButton.kr(lag = 0)
                val m  = Mix.fill(10)(SinOsc.ar(TRand.kr(200.0, 800.0, tr)))
                m * Linen.kr(tr, sustain = 0.025, release = 2)
            </example>
            <see>ugen.IRand</see>
            <see>ugen.TRand</see>
            <see>ugen.ExpRand</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="TExpRand" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="lo" default="0.01">
            <doc>
                lower limit of the output range
            </doc>
        </arg>
        <arg name="hi" default="1.0">
            <doc>
                upper limit of the output range
            </doc>
        </arg>
        <arg name="trig" type="trig">
            <doc>
                signal to trigger new random number
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that generates a new random decimal value each time it is triggered,
                using an exponential distribution from `lo` to `hi`.
                Values `lo` and `hi` must both have the same sign and be non-zero.
            </text>
            <example name="random sine frequencies, triggered by mouse button">
                val tr = MouseButton.kr(lag = 0)
                val m  = Mix.fill(10)(SinOsc.ar(TExpRand.kr(200.0, 800.0, tr)))
                m * Linen.kr(tr, sustain = 0.025, release = 2)
            </example>
            <see>ugen.TRand</see>
            <see>ugen.ExpRand</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="TIRand" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="lo" default="0">
            <doc>
                lower limit of the output range
            </doc>
        </arg>
        <arg name="hi" default="127">
            <doc>
                upper limit of the output range (inclusive)
            </doc>
        </arg>
        <arg name="trig" type="trig">
            <doc>
                signal to trigger new random number
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that outputs integer random numbers when triggered. The values have
                a uniform distribution from `lo` to `hi` (inclusive).
            </text>
            <example name="random sine frequencies, triggered by mouse button">
                val tr = MouseButton.kr(lag = 0)
                val m  = Mix.fill(10)(SinOsc.ar(TIRand.kr(40, 100, tr).midicps))
                m * Linen.kr(tr, sustain = 0.025, release = 2)
            </example>
            <see>ugen.IRand</see>
            <see>ugen.TRand</see>
        </doc>
    </ugen>
    <ugen name="NRand" random="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="lo" default="0.0">
            <doc>
                lower limit of the output range
            </doc>
        </arg>
        <arg name="hi" default="1.0">
            <doc>
                upper limit of the output range
            </doc>
        </arg>
        <arg name="n" default="2">
            <doc>
                the number of random numbers to average. For `n = 1`, the result is
                identical to `Rand`, for `n = 2`, the distribution is triangular,
                and for larger values the distribution converges towards a Gaussian.
                '''Warning''': The value should be not be less than one.
            </doc>
        </arg>
        <doc>
            <text>
                A scalar UGen that generates a single random decimal value, averaging a given
                number of samples from a uniform distribution between `lo` and `hi`.
            </text>
            <example name="three clusters with different distributions">
                val z = 1 to 3 map { n =>
                  Mix.fill(10)(FSinOsc.ar(NRand(200, 800, n))) * SinOsc.ar(0.4, n).max(0)
                }
                SplayAz.ar(2, z) * 0.025
            </example>
            <see>ugen.IRand</see>
            <see>ugen.TRand</see>
            <see>ugen.ExpRand</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="LinRand" random="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="lo" default="0.0">
            <doc>
                lower limit of the output range
            </doc>
        </arg>
        <arg name="hi" default="1.0">
            <doc>
                upper limit of the output range
            </doc>
        </arg>
        <arg name="minMax" default="0">
            <doc>
                if `0`, the output is skewed towards `lo`, if `1`, the output is
                skewed towards `hi`.
            </doc>
        </arg>
        <doc>
            <text>
                A scalar UGen that generates a single random decimal value between `lo` and `hi` with
                a selectable skew towards either end.

                The `minMax &lt;= 0` behaves rather odd: If `minMax` is less than 1, the distribution is skewed
                towards `lo` (with `lo = 0` and `hi = 1`, the mean is approx. 0.33). If `minMax` is greater than
                or equal to 1, the distribution is skewed towards `hi` (with `lo = 0` and `hi = 1`, the mean
                is approx 0.66).
            </text>
            <example name="two clusters with opposite skew">
                val z: GE = 0 to 1 map { n =>
                  Mix.fill(10)(FSinOsc.ar(LinRand(200, 800, n))) * SinOsc.ar(0.4, n * math.Pi).max(0)
                }
                z * 0.025
            </example>
            <see>ugen.Rand</see>
            <see>ugen.ExpRand</see>
            <see>ugen.NRand</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="ExpRand" random="true">
        <rate name="scalar" implied="true" method="apply"/>
        <arg name="lo" default="0.01">
            <doc>
                lower limit of the output range
            </doc>
        </arg>
        <arg name="hi" default="1.0">
            <doc>
                upper limit of the output range
            </doc>
        </arg>
        <doc>
            <text>
                A scalar UGen that generates a single random decimal value, using an exponential distribution from
                `lo` to `hi`.
                Values `lo` and `hi` must both have the same sign and be non-zero.
            </text>
            <example name="random sine frequencies">
                val m = Mix.fill(10)(FSinOsc.ar(ExpRand(200.0, 800.0)))
                m * Line.kr(0.025, 0, 4, doneAction = freeSelf)
            </example>
            <see>ugen.Rand</see>
            <see>ugen.TExpRand</see>
            <see>ugen.RandSeed</see>
        </doc>
    </ugen>
    <ugen name="CoinGate" random="true">
        <rate name="control"/>
        <rate name="audio"/>
        <arg name="prob" default="0.5" pos="1">
            <doc>
                the probability between zero (no trigger passed) and 1 (all triggers passed)
            </doc>
        </arg>
        <arg name="in" type="trig" pos="0">
            <doc>
                the input triggers to filter
            </doc>
        </arg>
        <doc warn-pos="true">
            <text>
                A UGen that randomly filters an input trigger signal. When a trigger arrives, it may
                pass with a probability given by the `prob` argument.
            </text>
            <example name="filter dust, probability controlled by mouse">
                val p = MouseX.kr
                CoinGate.ar(Dust.ar(400), p)
            </example>
            <see>ugen.Gate</see>
            <see>ugen.PulseDivider</see>
            <see>ugen.TRand</see>
        </doc>
    </ugen>
    <ugen name="RandSeed" side-effect="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <arg name="trig" default="high">
            <doc>
                trigger that causes the seed to be set
            </doc>
        </arg>
        <arg name="seed" default="56789">
            <doc>
                the seed for the random number generator, read
                at the moment the trigger arrives.
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that resets the seed of the synth's random number generator upon receiving a trigger.
                All synths that use the same random number generator reproduce the same sequence of numbers again.
                The generator can be set using the `RandID` UGen.
            </text>
            <example name="reset seed via mouse button">
                val freq = TIRand.kr(40, 100, Impulse.kr(4)).midicps
                RandSeed.kr(MouseButton.kr(lag = 0) + Impulse.kr(0), 234)
                SinOsc.ar(freq) * 0.2
            </example>
            <see>ugen.Rand</see>
            <see>ugen.RandID</see>
            <see>ugen.IRand</see>
            <see>ugen.WhiteNoise</see>
        </doc>
    </ugen>
    <ugen name="RandID" side-effect="true">
        <rate name="scalar"/>
        <rate name="control"/>
        <arg name="id" default="0">
            <doc>
                the random number generator identifier from zero until
                the maximum number of generators specified with the server
                switch `-r` (default: 64)
            </doc>
        </arg>
        <doc>
            <text>
                A UGen that determines which random number generator is used for the enclosing synth.
                All synths that use the same generator reproduce the same sequence of numbers when the
                same seed is set again.
            </text>
            <example name="button alternatingly resets left and right seed" type="full">
                0 to 1 map { i =>
                  play {
                    RandID.ir(i)
                    val x     = Impulse.kr(4)
                    val pch   = TIRand.kr(40, 100, x)
                    val b     = MouseButton.kr(lag = 0)
                    val tr    = PulseDivider.kr(b, 2, i)
                    pch.poll(x, if (i == 0) "left " else "right")
                    RandSeed.kr(tr + Impulse.kr(0), 234)
                    Out.ar(i, SinOsc.ar(pch.midicps) * 0.2)
                  }
                }
            </example>
            <see>ugen.Rand</see>
            <see>ugen.RandSeed</see>
            <see>ugen.IRand</see>
            <see>ugen.WhiteNoise</see>
        </doc>
    </ugen>
</ugens>