
trait A[ +B ]

trait B; trait C extends B

def test1( a: A[ B ]) { }
def test2( a: A[ C ]) { test1( a )}  // we can use audio-rate where Rate is asked
def test3( a: A[ C ]) : A[ B ] = a   // we can return Rate where audio is given

def seq1( a: Seq[ A[ C ]]) : Seq[ A[ B ]] = a  // same with seqs


///////////

the problem is Nothing

///////////


sealed trait C; sealed trait C1 extends C; case object C1 extends C1; sealed trait C2 extends C; case object C2 extends C2
case class B[ X <: C ]( c: X )

def wrongType( b: B[ _ ]) = b match {
   case B( c @ C1 ) => B( c )
   case _ => error( "No way jose" )
}

val x: B[ C1 ] = wrongType( B( C1 ))  // NO


def good( b: B[ _ ]) = b match {
   case B( c @ C1 ) => B[ C1 ]( c )
   case _ => error( "No way jose" )
}

val x: B[ C1 ] = good( B( C1 )) // YES

def notPossible( b: B[ _ ]) = b match {
   case B( c @ C1 ) => B[ C2 ]( c )  // NO
   case _ => error( "No way jose" )
}
