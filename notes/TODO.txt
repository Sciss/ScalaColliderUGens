UGens: Sum3, Sum4, SendPeakRMS, BHiCut, BLowCut, LRLowCut, LRHiCut
Pseudo-UGens: SelectL looks useful, Changed


top level arg definition: should not have rate attribute, better to keep them homogeneously in the rate entries

:::::::::::

WhiteNoise etc. --> mce
special input values: Poll, EnvGen, Klang, ...
output accessors for multi-output ugens, e.g. for Pitch
( default values: work around bug for float-literals )
doc comments
individuation

////////// 03-Jan

for one argument ugens:

   def expand = {
      val _bus = bus.expand
      val _sz_bus = _bus.size
      IIdxSeq.tabulate(_sz_bus_)(i => OutUGen(rate, _bus(i.%(_sz_bus)))
   }

should be simplified to

   def expand = {
      val _bus = bus.expand
      IIdxSeq.tabulate(_bus.size)(i => OutUGen(rate, _bus(i))
   }

this is by the way a bit faster than bus.expand.map( x => OutUGen( rate, x ))

///////

case class Done etc.: add "with ControlRated"
case class DiskIn etc.: extends Expands[] instead of GE[]

val _exp = max( ... ) --> maxInt
; optimierung: bei zwei argumenten einfach math.max nehmen

/////////////////

[OK] <arg rate="ugen"/>
[OK] <rate><arg name=... default=.../></rate>
[OK] <rate><arg name=... rate=.../></rate>
[OK] <doc warn-pos="true"/>
[OK] <ugen random="true"/>
[OK] <rate method="apply"/>
[OK] <rate method-alias="apply"/>
<outputs num="in"/> // DC (currently commented out)
[OK] <ugen reads-fft="true"/>
<arg ... expandbin="*"/>
<arg ... default="inf"/>

///////// missing ugens?
DelayUGens : GrainTap
Filter: Flip
LFUGens: Unwrap
Osc: FoldIndex

/////

Combination MultiOut + HasDoneFlag (PlayBuf) : 
MultiOutUGen[ R <: Rate ]( ... ) extends UGen with GE[R, UGenIn[ R ]]{
--> benoetigen GE[R, UGenIn[ R ] with HasDoneFlag ]

/////

DemandUGens

//////

bufgen : env ??

/////////////// Noise / expandBin solution:

object WhiteNoise {
   def kr: WhiteNoise[control,scalar,control] = kr( )
   def kr[S <: Rate, T <: Rate](mul: GE[S, UGenIn[S]] = 1.0f)( implicit rateOrder: RateOrder[ control, S, T ]) = apply[control, S, T](rateOrder.out, mul)(rateOrder)
   def ar: WhiteNoise[audio,scalar,audio] = ar( )
   def ar[S <: Rate, T <: Rate](mul: GE[S, UGenIn[S]] = 1.0f)( implicit rateOrder: RateOrder[ audio, S, T ]) = apply[audio, S, T](rateOrder.out, mul)(rateOrder)
}
case class WhiteNoise[R <: Rate, S <: Rate, T <: Rate](rate: T, mul: GE[S, UGenIn[S]])(implicit rateOrder: RateOrder[ R, S, T ])
extends GE[T, UGenIn[T]] with UsesRandSeed {
   def expand = {
      val _mul: IIdxSeq[UGenIn[S]] = mul.expand
      IIdxSeq.tabulate(_mul.size)(i => BinaryOpUGen[T]( rateOrder.out, BinaryOp.Times, WhiteNoiseUGen(rateOrder.in1), _mul(i)))
   }
}
case class WhiteNoiseUGen[R <: Rate](rate: R) extends SingleOutUGen[R](IIdxSeq.empty) with UsesRandSeed

/////////////// EnvGen relaxation:

object EnvGen {
   def kr(envelope: Expands[MultiGE], gate: AnyGE = 1.0f, levelScale: AnyGE = 1.0f, levelBias: AnyGE = 0.0f, timeScale: AnyGE = 1.0f, doneAction: AnyGE = doNothing) = apply[control](control, envelope, gate, levelScale, levelBias, timeScale, doneAction)
   def ar(envelope: Expands[MultiGE], gate: AnyGE = 1.0f, levelScale: AnyGE = 1.0f, levelBias: AnyGE = 0.0f, timeScale: AnyGE = 1.0f, doneAction: AnyGE = doNothing) = apply[audio](audio, envelope, gate, levelScale, levelBias, timeScale, doneAction)
}
case class EnvGen[R <: Rate](rate: R, envelope: Expands[MultiGE], gate: AnyGE, levelScale: AnyGE, levelBias: AnyGE, timeScale: AnyGE, doneAction: AnyGE) extends GE[R, EnvGenUGen[R]] {
   def expand = {
      val _gate: IIdxSeq[AnyUGenIn] = gate.expand
      val _levelScale: IIdxSeq[AnyUGenIn] = levelScale.expand
      val _levelBias: IIdxSeq[AnyUGenIn] = levelBias.expand
      val _timeScale: IIdxSeq[AnyUGenIn] = timeScale.expand
      val _doneAction: IIdxSeq[AnyUGenIn] = doneAction.expand
      val _envelope: IIdxSeq[MultiGE] = envelope.expand
      val _sz_gate = _gate.size
      val _sz_levelScale = _levelScale.size
      val _sz_levelBias = _levelBias.size
      val _sz_timeScale = _timeScale.size
      val _sz_doneAction = _doneAction.size
      val _sz_envelope = _envelope.size
      val _exp_ = maxInt(_sz_gate, _sz_levelScale, _sz_levelBias, _sz_timeScale, _sz_doneAction, _sz_envelope)
      IIdxSeq.tabulate(_exp_)(i => EnvGenUGen(rate, _envelope(i.%(_sz_envelope)).expand, _gate(i.%(_sz_gate)), _levelScale(i.%(_sz_levelScale)), _levelBias(i.%(_sz_levelBias)), _timeScale(i.%(_sz_timeScale)), _doneAction(i.%(_sz_doneAction))))
   }
}
case class EnvGenUGen[R <: Rate](rate: R, envelope: IIdxSeq[AnyUGenIn], gate: AnyUGenIn, levelScale: AnyUGenIn, levelBias: AnyUGenIn, timeScale: AnyUGenIn, doneAction: AnyUGenIn) extends SingleOutUGen[R](IIdxSeq[AnyUGenIn](gate, levelScale, levelBias, timeScale, doneAction).++(envelope))

/////////// Out

object Out {
   def ar(bus: AnyGE, in: Multi[GE[audio, UGenIn[audio]]])     = apply[audio](audio, bus, in)
   def kr(bus: AnyGE, in: Multi[AnyGE]) = apply[control](control, bus, in)
   def ir(bus: AnyGE, in: Multi[AnyGE])   = apply[scalar](scalar, bus, in)
}
case class Out[R <: Rate](rate: R, bus: AnyGE, in: Multi[AnyGE]) extends UGenSource[OutUGen[R]] with WritesBus {
   protected def expandUGens = {
      val _bus: IIdxSeq[AnyUGenIn] = bus.expand
      val _in: IIdxSeq[AnyGE] = in.mexpand
      val _sz_bus = _bus.size
      val _sz_in = _in.size
      val _exp_ = maxInt(_sz_bus, _sz_in)
      IIdxSeq.tabulate(_exp_)(i => OutUGen(rate, _bus(i.%(_sz_bus)), _in(i.%(_sz_in)).expand))
   }
}
case class OutUGen[R <: Rate](rate: R, bus: AnyUGenIn, in: IIdxSeq[AnyUGenIn]) extends ZeroOutUGen(IIdxSeq[AnyUGenIn](bus).++(in)) with WritesBus

////// the kind of mistakes that happen in dynamic typing:

XFade2 : XFade {
	*ar { arg inA, inB = 0.0 /* !! */, pan = 0.0, level = 1.0;
		^this.multiNew('audio', inA, inB, pan, level)
...
 	checkInputs { ^this.checkNInputs(2) }
}

////////////////////////////////
// Solution for DoneFlag
////////////////////////////////


object FreeSelfWhenDone {
   def kr(src: GE[UGenProxy[ UGen with HasDoneFlag]]) = apply(src)
}
case class FreeSelfWhenDone(src: GE[UGenProxy[ UGen with HasDoneFlag]]) extends SingleOutUGenSource[FreeSelfWhenDoneUGen] with HasSideEffect with ControlRated {
   protected def expandUGens = {
      val _src: IIdxSeq[UGenProxy[ UGen with HasDoneFlag]] = src.expand
      IIdxSeq.tabulate(_src.size)(i => FreeSelfWhenDoneUGen(_src(i)))
   }
}
case class FreeSelfWhenDoneUGen(src: UGenProxy[ UGen with HasDoneFlag]) extends SingleOutUGen(IIdxSeq(src)) with HasSideEffect with ControlRated

object PlayBuf {
   def kr(numChannels: Int, buf: AnyGE, speed: AnyGE = 1.0f, trig: AnyGE = 1.0f, startPos: AnyGE = 0.0f, loop: AnyGE = 1.0f, doneAction: AnyGE = doNothing) = apply(control, numChannels, buf, speed, trig, startPos, loop, doneAction)
   def ar(numChannels: Int, buf: AnyGE, speed: AnyGE = 1.0f, trig: AnyGE = 1.0f, startPos: AnyGE = 0.0f, loop: AnyGE = 1.0f, doneAction: AnyGE = doNothing) = apply(audio, numChannels, buf, speed, trig, startPos, loop, doneAction)
}
case class PlayBuf(rate: Rate, numChannels: Int, buf: AnyGE, speed: AnyGE, trig: AnyGE, startPos: AnyGE, loop: AnyGE, doneAction: AnyGE) extends MultiOutUGenSource[PlayBufUGen] with HasSideEffect with HasDoneFlag {
   protected def expandUGens = {
      val _buf: IIdxSeq[UGenIn] = buf.expand
      val _speed: IIdxSeq[UGenIn] = speed.expand
      val _trig: IIdxSeq[UGenIn] = trig.expand
      val _startPos: IIdxSeq[UGenIn] = startPos.expand
      val _loop: IIdxSeq[UGenIn] = loop.expand
      val _doneAction: IIdxSeq[UGenIn] = doneAction.expand
      val _sz_buf = _buf.size
      val _sz_speed = _speed.size
      val _sz_trig = _trig.size
      val _sz_startPos = _startPos.size
      val _sz_loop = _loop.size
      val _sz_doneAction = _doneAction.size
      val _exp_ = maxInt(_sz_buf, _sz_speed, _sz_trig, _sz_startPos, _sz_loop, _sz_doneAction)
      IIdxSeq.tabulate(_exp_)(i => PlayBufUGen(rate, numChannels, _buf(i.%(_sz_buf)), _speed(i.%(_sz_speed)), _trig(i.%(_sz_trig)), _startPos(i.%(_sz_startPos)), _loop(i.%(_sz_loop)), _doneAction(i.%(_sz_doneAction))))
   }
}
case class PlayBufUGen(rate: Rate, numChannels: Int, buf: UGenIn, speed: UGenIn, trig: UGenIn, startPos: UGenIn, loop: UGenIn, doneAction: UGenIn)
extends MultiOutUGen(IIdxSeq.fill(numChannels)(rate), IIdxSeq(buf, speed, trig, startPos, loop, doneAction)) with HasSideEffect with HasDoneFlag

///////////////////////////////////

Synthetic3
idea: Add the HasDoneFlag annotation to the rate parameter of GE (possible?)

better: consider case of PlayBuf -- this is a multi-out ugen, but in no case do we want do mce the Done. 
hence, instead of annotating the PlayBufUGen, just annotate PlayBuf, and Done will look like this:

object Done { def kr( g: AnyGE with HasDoneFlag ) ... }
case class Done( ... ) {
   def expand = {
      src.expand.headOption match {
         case Some( srch ) => IIdxSeq( new SingleOutUGen( "Done", control, IIdxSeq( srch ))
         case None => IIdxSeq.empty  // or throw runtime error?? or print warning??
      }
   }
}

alternative:

   protected def expandUGens = {
      val _src: IIdxSeq[UGenIn] = src.expand
      _src.headOption match {
         case Some( _src_ch ) => IIdxSeq( new SingleOutUGen("Done", control, IIdxSeq( _src_ch )))
         case None => Console.err.println( "Warning: Done omitted due to zero-outputs input" ); IIdxSeq.empty
      }
   }

/////

- final case class ?

/////

this is from manual craft:

case class Lag[ R <: Rate ](/*rate: R,*/ in: GE[ R ], time: AnyGE) extends SingleOutUGenSource[R] {
   protected def expandUGens = {
      val _in: IIdxSeq[UGenIn] = in.expand
      val _time: IIdxSeq[UGenIn] = time.expand
      val _sz_in = _in.size
      val _sz_time = _time.size
      val _exp_ = maxInt(_sz_in, _sz_time)
      IIdxSeq.tabulate(_exp_)(i => { val __in = _in(i.%(_sz_in)); new SingleOutUGen("Lag", __in.rate, IIdxSeq( __in, _time(i.%(_sz_time))))})
   }
}

open question to whether it's more elegant to leave away the rate arg or not.

vs.

case class Lag[R <: Rate](rate: R, in: AnyGE, time: AnyGE) extends SingleOutUGenSource[R] {
// ---> at least the rate of in should be "fixed"

; the advantage of the rate argument might be that def rate: R could be added to Single/MultiZeroOutUGenSource ?
; other advantage lies in tree rewriting : this would make the different ugen sources more homogeneous, e.g.

    { case LPF[_]( rate, in, freq ) => HPF( rate, in, freq )}
?
// on the other hand -- BinaryOp and UnaryOp already have no more rate args ....

/////

object WhiteNoise {
   def kr: WhiteNoise[control, scalar, control] = kr()
   def kr[S <: Rate, T <: Rate](mul: GE[S] = 1.0f)(implicit rateOrder: RateOrder[control, S, T]) = apply[control, S, T](rateOrder.out, mul)(rateOrder)
   def ar: WhiteNoise[audio, scalar, audio] = ar()
   def ar[S <: Rate, T <: Rate](mul: GE[S] = 1.0f)(implicit rateOrder: RateOrder[audio, S, T]) = apply[audio, S, T](rateOrder.out, mul)(rateOrder)
}
case class WhiteNoise[R <: Rate, S <: Rate, T <: Rate](rate: T, mul: GE[S])( implicit rateOrder: RateOrder[R, S, T]) extends SingleOutUGenSource[T] with UsesRandSeed

--> an alternative would be

object WhiteNoise {
   def kr: WhiteNoise[control, scalar] = kr()
   def kr[S <: Rate](mul: GE[S] = 1.0f)(implicit rateOrder: Rate.>=[control, S) = apply[control, S, T](control, mul)(rateOrder)
   def ar: WhiteNoise[audio, scalar, audio] = ar()
   def ar[S <: Rate](mul: GE[S] = 1.0f)(implicit rateOrder: Rate.>=[audio, S]) = apply[audio, S, T](audio, mul)(rateOrder)
}
case class WhiteNoise[R <: Rate, S <: Rate](rate: R, mul: GE[S])( implicit rateOrder: Rate.>=[R, S]) extends SingleOutUGenSource[T] with UsesRandSeed

// which has the advantage that it actually works :) because rateOrder.out is not effective anymore
// on the other hand -- BinaryOp and UnaryOp already have no more rate args ....
// a major disadvantage : you can't get Rate.>= for an unknown rate mul argument !

// workaround: rate should still be R ! i.e. the rate of the WhiteNoise itself, we'll need it in the SingleOutUGen !!

result:

object WhiteNoise {
   def kr: WhiteNoise[control, scalar, control] = kr()
   def kr[S <: Rate, T <: Rate](mul: GE[S] = 1.0f)(implicit rateOrder: RateOrder[control, S, T]) = apply[control, S, T](control, mul)(rateOrder)
   def ar: WhiteNoise[audio, scalar, audio] = ar()
   def ar[S <: Rate, T <: Rate](mul: GE[S] = 1.0f)(implicit rateOrder: RateOrder[audio, S, T]) = apply[audio, S, T](audio, mul)(rateOrder)
}
case class WhiteNoise[R <: Rate, S <: Rate, T <: Rate](rate: R, mul: GE[S])( implicit rateOrder: RateOrder[R, S, T]) extends SingleOutUGenSource[T] with UsesRandSeed {
   protected def expandUGens = {
      val _mul = mul.expand
      IIdxSeq.tabulate(_mul.size)(i => BinaryOp.Times.make1(new SingleOutUGen("WhiteNoise", rate, IIdxSeq.empty), _mul(i)))
   }
}

///////////// from manual craft

object Out {
   object RateCons {
      implicit val ar: RateCons[ audio, audio ]             = new RateCons[ audio, audio ]
      implicit def kr[ S <: Rate ]: RateCons[ control, S ]  = new RateCons[ control, S ]
      implicit def ir[ S <: Rate ]: RateCons[ scalar, S ]   = new RateCons[ scalar, S ]
   }
   sealed class RateCons[ R <: Rate, S <: Rate ]

   def ar(bus: AnyGE, in: Multi[GE[audio]]) = apply[audio, audio](audio, bus, in)
   def kr[ S <: Rate ](bus: AnyGE, in: Multi[GE[S]]) = apply[control, S](control, bus, in)
   def ir[ S <: Rate ](bus: AnyGE, in: Multi[GE[S]]) = apply[scalar, S](scalar, bus, in)
}
final case class Out[R <: Rate, S <: Rate](rate: R, bus: AnyGE, in: Multi[GE[S]])( implicit rateCons: Out.RateCons[ R, S ])
extends ZeroOutUGenSource[R] with WritesBus {
   protected def expandUGens = {
      val _bus = bus.expand
      val _in = in.mexpand
      val _sz_bus = _bus.size
      val _sz_in = _in.size
      val _exp_ = maxInt(_sz_bus, _sz_in)
      IIdxSeq.tabulate(_exp_)(i => new ZeroOutUGen("Out", rate, IIdxSeq(_bus(i.%(_sz_bus))).++(_in(i.%(_sz_in)).expand)))
   }
}

///////////////

[error] /Users/hhrutz/Documents/devel/ScalaCollider/src/main/scala/de/sciss/synth/ugen/FFT_UGens.scala:20: overloaded method apply needs result type
[error]    def apply(chain: GE, winType: GE = 0.0f, winSize: GE = 0.0f) = apply(audio, chain, winType, winSize)
[error]                                                                        ^
